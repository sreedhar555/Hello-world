//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NOSNewDO
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OnlineTest2017NewEntities : DbContext
    {
        public OnlineTest2017NewEntities()
            : base("name=OnlineTest2017NewEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<allMinuserfeemaxfort> allMinuserfeemaxforts { get; set; }
        public virtual DbSet<alluserfeemaxfort> alluserfeemaxforts { get; set; }
        public virtual DbSet<CuteChat4_InstantMessage> CuteChat4_InstantMessage { get; set; }
        public virtual DbSet<CuteChat4_Lobby> CuteChat4_Lobby { get; set; }
        public virtual DbSet<CuteChat4_LogEvent> CuteChat4_LogEvent { get; set; }
        public virtual DbSet<CuteChat4_LogMessage> CuteChat4_LogMessage { get; set; }
        public virtual DbSet<CuteChat4_Portal> CuteChat4_Portal { get; set; }
        public virtual DbSet<CuteChat4_Rule> CuteChat4_Rule { get; set; }
        public virtual DbSet<CuteChat4_Settings> CuteChat4_Settings { get; set; }
        public virtual DbSet<CuteChat4_SupportAgent> CuteChat4_SupportAgent { get; set; }
        public virtual DbSet<CuteChat4_SupportCustomer> CuteChat4_SupportCustomer { get; set; }
        public virtual DbSet<CuteChat4_SupportDepartment> CuteChat4_SupportDepartment { get; set; }
        public virtual DbSet<CuteChat4_SupportFeedback> CuteChat4_SupportFeedback { get; set; }
        public virtual DbSet<CuteChat4_SupportMessage> CuteChat4_SupportMessage { get; set; }
        public virtual DbSet<CuteChat4_SupportSession> CuteChat4_SupportSession { get; set; }
        public virtual DbSet<CuteChat4_User> CuteChat4_User { get; set; }
        public virtual DbSet<MaxfortIndividualpaymentDetail> MaxfortIndividualpaymentDetails { get; set; }
        public virtual DbSet<MaxfortTotalPaymentDetail> MaxfortTotalPaymentDetails { get; set; }
        public virtual DbSet<Maxuserfeemaxfort> Maxuserfeemaxforts { get; set; }
        public virtual DbSet<Minuserfeemaxfort> Minuserfeemaxforts { get; set; }
        public virtual DbSet<REGULAROFFCAMPU> REGULAROFFCAMPUS { get; set; }
        public virtual DbSet<ResourceActivity> ResourceActivities { get; set; }
        public virtual DbSet<sys_dm_exec_query_stats1> sys_dm_exec_query_stats1 { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tbl_managedaywiseshift> tbl_managedaywiseshift { get; set; }
        public virtual DbSet<tbl_PersonalDocuments_PortalUsers> tbl_PersonalDocuments_PortalUsers { get; set; }
        public virtual DbSet<tbl_WorkExperience_Documents> tbl_WorkExperience_Documents { get; set; }
        public virtual DbSet<tblAcademicYearChangeActivity> tblAcademicYearChangeActivities { get; set; }
        public virtual DbSet<tblAccidentHistory> tblAccidentHistories { get; set; }
        public virtual DbSet<tblAdditionalDesignation> tblAdditionalDesignations { get; set; }
        public virtual DbSet<tblAdhocpostedquery> tblAdhocpostedqueries { get; set; }
        public virtual DbSet<tblAdhocSavedQuery> tblAdhocSavedQueries { get; set; }
        public virtual DbSet<tblAdminActivityLog> tblAdminActivityLogs { get; set; }
        public virtual DbSet<tblAdminComment> tblAdminComments { get; set; }
        public virtual DbSet<tblAdminInstanceConfiguration> tblAdminInstanceConfigurations { get; set; }
        public virtual DbSet<tblAdmissionCriteriaDetail> tblAdmissionCriteriaDetails { get; set; }
        public virtual DbSet<tblAdmissionCriteriaDocument> tblAdmissionCriteriaDocuments { get; set; }
        public virtual DbSet<tblAdmissionDocument> tblAdmissionDocuments { get; set; }
        public virtual DbSet<tblAdmissionFee_ChequeTracking> tblAdmissionFee_ChequeTracking { get; set; }
        public virtual DbSet<tblAdmissionsCountTarget> tblAdmissionsCountTargets { get; set; }
        public virtual DbSet<tblAdmissionsCountTargetCounselorWise> tblAdmissionsCountTargetCounselorWises { get; set; }
        public virtual DbSet<tblAdmissionStudentwithdrawal> tblAdmissionStudentwithdrawals { get; set; }
        public virtual DbSet<tblAdmissionStudentWithdrawalClearanceDetail> tblAdmissionStudentWithdrawalClearanceDetails { get; set; }
        public virtual DbSet<tblAdmissionStudentwithdrawalStatu> tblAdmissionStudentwithdrawalStatus { get; set; }
        public virtual DbSet<tblAdmissionVacanciesByCategory> tblAdmissionVacanciesByCategories { get; set; }
        public virtual DbSet<tblAdmisssionCategory> tblAdmisssionCategories { get; set; }
        public virtual DbSet<tblAdvanceSearch> tblAdvanceSearches { get; set; }
        public virtual DbSet<tblAdvanceSearchData> tblAdvanceSearchDatas { get; set; }
        public virtual DbSet<tblAdvertisement> tblAdvertisements { get; set; }
        public virtual DbSet<tblAdvtsBillingDetail> tblAdvtsBillingDetails { get; set; }
        public virtual DbSet<tblAdvtsContactType> tblAdvtsContactTypes { get; set; }
        public virtual DbSet<tblAdvtsCustomerContact> tblAdvtsCustomerContacts { get; set; }
        public virtual DbSet<tblAdvtsCustomer> tblAdvtsCustomers { get; set; }
        public virtual DbSet<tblAllergie_Health> tblAllergie_Health { get; set; }
        public virtual DbSet<tblAllergie_Health_Admission> tblAllergie_Health_Admission { get; set; }
        public virtual DbSet<tblAllowLeavePastDay> tblAllowLeavePastDays { get; set; }
        public virtual DbSet<tblAllowPostAttendance> tblAllowPostAttendances { get; set; }
        public virtual DbSet<tblAppraisalDocument> tblAppraisalDocuments { get; set; }
        public virtual DbSet<tblAppraisalQuarter> tblAppraisalQuarters { get; set; }
        public virtual DbSet<tblAptechLoginBrowserDetail> tblAptechLoginBrowserDetails { get; set; }
        public virtual DbSet<tblAssessment> tblAssessments { get; set; }
        public virtual DbSet<tblAssessorFeedbackDetail> tblAssessorFeedbackDetails { get; set; }
        public virtual DbSet<tblAssetDetail> tblAssetDetails { get; set; }
        public virtual DbSet<tblAssetItemDetail> tblAssetItemDetails { get; set; }
        public virtual DbSet<tblAssetItemService> tblAssetItemServices { get; set; }
        public virtual DbSet<tblAssignStudentForExam> tblAssignStudentForExams { get; set; }
        public virtual DbSet<tblAssignSubjectTool> tblAssignSubjectTools { get; set; }
        public virtual DbSet<tblAttendance> tblAttendances { get; set; }
        public virtual DbSet<tblAttendanceExtension> tblAttendanceExtensions { get; set; }
        public virtual DbSet<tblAttendanceExtension_Staff> tblAttendanceExtension_Staff { get; set; }
        public virtual DbSet<tblAttendanceExtensionDeleted> tblAttendanceExtensionDeleteds { get; set; }
        public virtual DbSet<tblAttendanceMark> tblAttendanceMarks { get; set; }
        public virtual DbSet<tblAttendanceMode> tblAttendanceModes { get; set; }
        public virtual DbSet<tblAttendanceMonthly> tblAttendanceMonthlies { get; set; }
        public virtual DbSet<tblAuditField> tblAuditFields { get; set; }
        public virtual DbSet<tblAuditType> tblAuditTypes { get; set; }
        public virtual DbSet<tblAuthType> tblAuthTypes { get; set; }
        public virtual DbSet<tblAvailableLeaf> tblAvailableLeaves { get; set; }
        public virtual DbSet<tblBatchDetail> tblBatchDetails { get; set; }
        public virtual DbSet<tblBestPerformer> tblBestPerformers { get; set; }
        public virtual DbSet<tblBiometricEmp> tblBiometricEmps { get; set; }
        public virtual DbSet<tblBiometricEmpHeritage> tblBiometricEmpHeritages { get; set; }
        public virtual DbSet<tblBiometricEmpNIMRA> tblBiometricEmpNIMRAs { get; set; }
        public virtual DbSet<tblBiometricJobOutput> tblBiometricJobOutputs { get; set; }
        public virtual DbSet<tblBiometricTiming> tblBiometricTimings { get; set; }
        public virtual DbSet<tblBioTempNIMRA2> tblBioTempNIMRA2 { get; set; }
        public virtual DbSet<tblBloodGroup> tblBloodGroups { get; set; }
        public virtual DbSet<tblBookedAppointment> tblBookedAppointments { get; set; }
        public virtual DbSet<tblBookedResource> tblBookedResources { get; set; }
        public virtual DbSet<tblBookedResource1> tblBookedResource1 { get; set; }
        public virtual DbSet<tblBulkAttendanceValidation> tblBulkAttendanceValidations { get; set; }
        public virtual DbSet<tblBulkUpload> tblBulkUploads { get; set; }
        public virtual DbSet<tblBulkUploadAttendanceTemp> tblBulkUploadAttendanceTemps { get; set; }
        public virtual DbSet<tblBulkUploadNew> tblBulkUploadNews { get; set; }
        public virtual DbSet<tblBulkUploadUsersAdmission> tblBulkUploadUsersAdmissions { get; set; }
        public virtual DbSet<tblBusAttendance> tblBusAttendances { get; set; }
        public virtual DbSet<tblBusDiary> tblBusDiaries { get; set; }
        public virtual DbSet<tblBusDiaryFuel> tblBusDiaryFuels { get; set; }
        public virtual DbSet<tblBusDocument> tblBusDocuments { get; set; }
        public virtual DbSet<tblBusFuel> tblBusFuels { get; set; }
        public virtual DbSet<tblBusInfo> tblBusInfoes { get; set; }
        public virtual DbSet<tblBusRoute> tblBusRoutes { get; set; }
        public virtual DbSet<tblBusServiceRepairDetail> tblBusServiceRepairDetails { get; set; }
        public virtual DbSet<tblCalendarEvent> tblCalendarEvents { get; set; }
        public virtual DbSet<tblCaste> tblCastes { get; set; }
        public virtual DbSet<tblCasteCommunity> tblCasteCommunities { get; set; }
        public virtual DbSet<tblCategorywiseLeaveAllocation> tblCategorywiseLeaveAllocations { get; set; }
        public virtual DbSet<tblCenterWiseCounsellingTarget> tblCenterWiseCounsellingTargets { get; set; }
        public virtual DbSet<tblCertificateInformation> tblCertificateInformations { get; set; }
        public virtual DbSet<tblChangeActivity> tblChangeActivities { get; set; }
        public virtual DbSet<tblCharacterTarget> tblCharacterTargets { get; set; }
        public virtual DbSet<tblCharacterTargetAssociation> tblCharacterTargetAssociations { get; set; }
        public virtual DbSet<tblCheckListRubric> tblCheckListRubrics { get; set; }
        public virtual DbSet<tblChildOptionalSubjectsForClassXI> tblChildOptionalSubjectsForClassXIs { get; set; }
        public virtual DbSet<tblCity> tblCities { get; set; }
        public virtual DbSet<tblclasscoordinator> tblclasscoordinators { get; set; }
        public virtual DbSet<tblClasses_Admission> tblClasses_Admission { get; set; }
        public virtual DbSet<tblClassesPreferredHeritage> tblClassesPreferredHeritages { get; set; }
        public virtual DbSet<tblClassification> tblClassifications { get; set; }
        public virtual DbSet<tblClassificationCategory> tblClassificationCategories { get; set; }
        public virtual DbSet<tblClearanceLevel> tblClearanceLevels { get; set; }
        public virtual DbSet<tblClearanceType> tblClearanceTypes { get; set; }
        public virtual DbSet<tblCommonData> tblCommonDatas { get; set; }
        public virtual DbSet<tblCompaniesDetail> tblCompaniesDetails { get; set; }
        public virtual DbSet<tblCompaniesMaster> tblCompaniesMasters { get; set; }
        public virtual DbSet<tblComplaintComment> tblComplaintComments { get; set; }
        public virtual DbSet<tblCompOffLeaf> tblCompOffLeaves { get; set; }
        public virtual DbSet<tblContact> tblContacts { get; set; }
        public virtual DbSet<tblContactType> tblContactTypes { get; set; }
        public virtual DbSet<tblCounsellingTarget> tblCounsellingTargets { get; set; }
        public virtual DbSet<tblCountry> tblCountries { get; set; }
        public virtual DbSet<tblCountryTimeZone> tblCountryTimeZones { get; set; }
        public virtual DbSet<tblCourierInformation> tblCourierInformations { get; set; }
        public virtual DbSet<tblCourseMaterialRequestDispatchDetail> tblCourseMaterialRequestDispatchDetails { get; set; }
        public virtual DbSet<tblDailyClincialRecord> tblDailyClincialRecords { get; set; }
        public virtual DbSet<tblDayWiseShiftAllocation> tblDayWiseShiftAllocations { get; set; }
        public virtual DbSet<tbldependedsalaryAttributeAmount> tbldependedsalaryAttributeAmounts { get; set; }
        public virtual DbSet<tbldependedsalaryAttributeAmountsTempInsert> tbldependedsalaryAttributeAmountsTempInserts { get; set; }
        public virtual DbSet<tblDietaryNeed> tblDietaryNeeds { get; set; }
        public virtual DbSet<tblDisabilityDetail> tblDisabilityDetails { get; set; }
        public virtual DbSet<tblDisciplineCategory_Heritage> tblDisciplineCategory_Heritage { get; set; }
        public virtual DbSet<tblDisciplineIncidents_Heritage> tblDisciplineIncidents_Heritage { get; set; }
        public virtual DbSet<tblDisciplineMeetingDetails_Heritage> tblDisciplineMeetingDetails_Heritage { get; set; }
        public virtual DbSet<tblDoctorDetail> tblDoctorDetails { get; set; }
        public virtual DbSet<tblDoctorType> tblDoctorTypes { get; set; }
        public virtual DbSet<tblDriver> tblDrivers { get; set; }
        public virtual DbSet<tblDurationTarget> tblDurationTargets { get; set; }
        public virtual DbSet<tblEAppointment> tblEAppointments { get; set; }
        public virtual DbSet<tblEBlog> tblEBlogs { get; set; }
        public virtual DbSet<tblEBlogComment> tblEBlogComments { get; set; }
        public virtual DbSet<tblECA> tblECAs { get; set; }
        public virtual DbSet<tblEClassifiedItemImage> tblEClassifiedItemImages { get; set; }
        public virtual DbSet<tblEClassifiedItem> tblEClassifiedItems { get; set; }
        public virtual DbSet<tblEditUserProfile> tblEditUserProfiles { get; set; }
        public virtual DbSet<tblEducationalSubject> tblEducationalSubjects { get; set; }
        public virtual DbSet<tblEducationDetail> tblEducationDetails { get; set; }
        public virtual DbSet<tblEducationDetailSubjectMark> tblEducationDetailSubjectMarks { get; set; }
        public virtual DbSet<tblEduGroupClassification> tblEduGroupClassifications { get; set; }
        public virtual DbSet<tblEffectedTable> tblEffectedTables { get; set; }
        public virtual DbSet<tblEFolderDocAuthorization> tblEFolderDocAuthorizations { get; set; }
        public virtual DbSet<tblEFolderDocument> tblEFolderDocuments { get; set; }
        public virtual DbSet<tblEFolderHeirarchy> tblEFolderHeirarchies { get; set; }
        public virtual DbSet<tblEFormActivity> tblEFormActivities { get; set; }
        public virtual DbSet<tblEFormAuthorization> tblEFormAuthorizations { get; set; }
        public virtual DbSet<tblEFormDemo> tblEFormDemoes { get; set; }
        public virtual DbSet<tblEForm> tblEForms { get; set; }
        public virtual DbSet<tblEmailLogDetail> tblEmailLogDetails { get; set; }
        public virtual DbSet<tblEmpBusAssignment> tblEmpBusAssignments { get; set; }
        public virtual DbSet<tblEmployeeGratuity> tblEmployeeGratuities { get; set; }
        public virtual DbSet<tblEmployeeTypeStatu> tblEmployeeTypeStatus { get; set; }
        public virtual DbSet<tblEmployementStatu> tblEmployementStatus { get; set; }
        public virtual DbSet<tblEncashLeaveDetail> tblEncashLeaveDetails { get; set; }
        public virtual DbSet<tblENoticeAcknowledgement> tblENoticeAcknowledgements { get; set; }
        public virtual DbSet<tblENotice> tblENotices { get; set; }
        public virtual DbSet<tblENoticeTarget> tblENoticeTargets { get; set; }
        public virtual DbSet<tblEnquiryDetail> tblEnquiryDetails { get; set; }
        public virtual DbSet<tblEnquiryDocumentCheckList> tblEnquiryDocumentCheckLists { get; set; }
        public virtual DbSet<tblEnquiryGroup> tblEnquiryGroups { get; set; }
        public virtual DbSet<tblEntity> tblEntities { get; set; }
        public virtual DbSet<tblEntityBillingDetail> tblEntityBillingDetails { get; set; }
        public virtual DbSet<tblEntityCategory> tblEntityCategories { get; set; }
        public virtual DbSet<tblEResourceActivity> tblEResourceActivities { get; set; }
        public virtual DbSet<tblEResourceAuthorization> tblEResourceAuthorizations { get; set; }
        public virtual DbSet<tblEResourceAuthorization1> tblEResourceAuthorization1 { get; set; }
        public virtual DbSet<tblEResourceDaysname> tblEResourceDaysnames { get; set; }
        public virtual DbSet<tblEResourceItem> tblEResourceItems { get; set; }
        public virtual DbSet<tblEResourceItems1> tblEResourceItems1 { get; set; }
        public virtual DbSet<tblErrorLog> tblErrorLogs { get; set; }
        public virtual DbSet<tblExamCenter> tblExamCenters { get; set; }
        public virtual DbSet<tblExamCenterHoliday> tblExamCenterHolidays { get; set; }
        public virtual DbSet<tblExamCenterIPAddress> tblExamCenterIPAddresses { get; set; }
        public virtual DbSet<tblExamCenterSlot> tblExamCenterSlots { get; set; }
        public virtual DbSet<tblExamNotAttemptedReason> tblExamNotAttemptedReasons { get; set; }
        public virtual DbSet<tblExamStatu> tblExamStatus { get; set; }
        public virtual DbSet<tblExamSubjectTopicMark> tblExamSubjectTopicMarks { get; set; }
        public virtual DbSet<tblExamSubjectTopic> tblExamSubjectTopics { get; set; }
        public virtual DbSet<tblExamTiming> tblExamTimings { get; set; }
        public virtual DbSet<tblExpMonth_heritage> tblExpMonth_heritage { get; set; }
        public virtual DbSet<tblExpYears_Heritage> tblExpYears_Heritage { get; set; }
        public virtual DbSet<tblExternalUser> tblExternalUsers { get; set; }
        public virtual DbSet<tblExternalUserChildren_Heritage> tblExternalUserChildren_Heritage { get; set; }
        public virtual DbSet<tblExternalUserClassesPreferred_Heritage> tblExternalUserClassesPreferred_Heritage { get; set; }
        public virtual DbSet<tblExternalUserEduDetails_Heritage> tblExternalUserEduDetails_Heritage { get; set; }
        public virtual DbSet<tblExternalUserExpDetails_Heritage> tblExternalUserExpDetails_Heritage { get; set; }
        public virtual DbSet<tblExternalUserExtension_Heritage> tblExternalUserExtension_Heritage { get; set; }
        public virtual DbSet<tblExternalUserLanguageProficiency_Heritage> tblExternalUserLanguageProficiency_Heritage { get; set; }
        public virtual DbSet<tblExternalUserOtherInfo_Heritage> tblExternalUserOtherInfo_Heritage { get; set; }
        public virtual DbSet<tblExternalUserPostingLocation_Heritage> tblExternalUserPostingLocation_Heritage { get; set; }
        public virtual DbSet<tblExternalUserProfTraning_Heritage> tblExternalUserProfTraning_Heritage { get; set; }
        public virtual DbSet<tblExternalUserSubFuncArea_Heritage> tblExternalUserSubFuncArea_Heritage { get; set; }
        public virtual DbSet<tblExternalUserSubjects_Heritage> tblExternalUserSubjects_Heritage { get; set; }
        public virtual DbSet<tblFacultyPublication> tblFacultyPublications { get; set; }
        public virtual DbSet<tblFeeConcedingType> tblFeeConcedingTypes { get; set; }
        public virtual DbSet<tblFeedBackAnswer> tblFeedBackAnswers { get; set; }
        public virtual DbSet<tblFeeInstallment> tblFeeInstallments { get; set; }
        public virtual DbSet<tblFeeInstallments_bomma> tblFeeInstallments_bomma { get; set; }
        public virtual DbSet<tblFeeInstallments_Cheque> tblFeeInstallments_Cheque { get; set; }
        public virtual DbSet<tblFeeInstallments_delete> tblFeeInstallments_delete { get; set; }
        public virtual DbSet<tblFeeInstallmentsICFE_15th_Night> tblFeeInstallmentsICFE_15th_Night { get; set; }
        public virtual DbSet<tblFeeMode> tblFeeModes { get; set; }
        public virtual DbSet<tblFeeTerm> tblFeeTerms { get; set; }
        public virtual DbSet<tblFeeTypeConType> tblFeeTypeConTypes { get; set; }
        public virtual DbSet<tblFeeTypeTerm> tblFeeTypeTerms { get; set; }
        public virtual DbSet<tblFileManagement> tblFileManagements { get; set; }
        public virtual DbSet<tblFoodOffering> tblFoodOfferings { get; set; }
        public virtual DbSet<tblFuncAreaHeritage> tblFuncAreaHeritages { get; set; }
        public virtual DbSet<tblGeneratedInvoiceDetail> tblGeneratedInvoiceDetails { get; set; }
        public virtual DbSet<tblGeneratedInvoice> tblGeneratedInvoices { get; set; }
        public virtual DbSet<tblGeneratedProgressReport> tblGeneratedProgressReports { get; set; }
        public virtual DbSet<tblGeoTagImage> tblGeoTagImages { get; set; }
        public virtual DbSet<tblGlobalClassification> tblGlobalClassifications { get; set; }
        public virtual DbSet<tblGlobalExam> tblGlobalExams { get; set; }
        public virtual DbSet<tblGlobalFeeTypesCC> tblGlobalFeeTypesCCs { get; set; }
        public virtual DbSet<tblGlobalJobRole> tblGlobalJobRoles { get; set; }
        public virtual DbSet<tblGlobalLogistic> tblGlobalLogistics { get; set; }
        public virtual DbSet<tblGlobalSubClassification> tblGlobalSubClassifications { get; set; }
        public virtual DbSet<tblGoal> tblGoals { get; set; }
        public virtual DbSet<tblGroup> tblGroups { get; set; }
        public virtual DbSet<tblHealthCheckUp> tblHealthCheckUps { get; set; }
        public virtual DbSet<tblHealthCheckUpType> tblHealthCheckUpTypes { get; set; }
        public virtual DbSet<tblHealthDetail> tblHealthDetails { get; set; }
        public virtual DbSet<tblHealthhistory> tblHealthhistories { get; set; }
        public virtual DbSet<tblHealthhistory_Admission> tblHealthhistory_Admission { get; set; }
        public virtual DbSet<tblHolidayStaffTarget> tblHolidayStaffTargets { get; set; }
        public virtual DbSet<tblHolidayTarget> tblHolidayTargets { get; set; }
        public virtual DbSet<tblHostelvisitor> tblHostelvisitors { get; set; }
        public virtual DbSet<tblHostelvisitor_Admission> tblHostelvisitor_Admission { get; set; }
        public virtual DbSet<tblHRSubordinator> tblHRSubordinators { get; set; }
        public virtual DbSet<tblHygieneCheck> tblHygieneChecks { get; set; }
        public virtual DbSet<tblImageCompare> tblImageCompares { get; set; }
        public virtual DbSet<tblIndustryType> tblIndustryTypes { get; set; }
        public virtual DbSet<tblInstance> tblInstances { get; set; }
        public virtual DbSet<tblInstanceAcademicYear> tblInstanceAcademicYears { get; set; }
        public virtual DbSet<tblInstanceAlbumImage> tblInstanceAlbumImages { get; set; }
        public virtual DbSet<tblInstanceAlbum> tblInstanceAlbums { get; set; }
        public virtual DbSet<tblInstanceAnswer> tblInstanceAnswers { get; set; }
        public virtual DbSet<tblInstanceAssetItem> tblInstanceAssetItems { get; set; }
        public virtual DbSet<tblInstanceAttendanceType> tblInstanceAttendanceTypes { get; set; }
        public virtual DbSet<tblInstanceBankAccount> tblInstanceBankAccounts { get; set; }
        public virtual DbSet<tblInstanceBatchCode> tblInstanceBatchCodes { get; set; }
        public virtual DbSet<tblInstanceBatches_Admission> tblInstanceBatches_Admission { get; set; }
        public virtual DbSet<tblInstanceBatches_Heritage> tblInstanceBatches_Heritage { get; set; }
        public virtual DbSet<tblInstanceBlock> tblInstanceBlocks { get; set; }
        public virtual DbSet<tblInstanceCategory> tblInstanceCategories { get; set; }
        public virtual DbSet<tblInstanceClassification> tblInstanceClassifications { get; set; }
        public virtual DbSet<tblInstanceClassificationVacancies_Admission> tblInstanceClassificationVacancies_Admission { get; set; }
        public virtual DbSet<tblInstanceClientXML> tblInstanceClientXMLs { get; set; }
        public virtual DbSet<tblInstanceColumn> tblInstanceColumns { get; set; }
        public virtual DbSet<tblInstanceCommunity> tblInstanceCommunities { get; set; }
        public virtual DbSet<tblInstanceComplaint> tblInstanceComplaints { get; set; }
        public virtual DbSet<tblInstanceConfig> tblInstanceConfigs { get; set; }
        public virtual DbSet<tblInstanceCoolLink> tblInstanceCoolLinks { get; set; }
        public virtual DbSet<tblInstanceCostCenter> tblInstanceCostCenters { get; set; }
        public virtual DbSet<tblInstanceDescriptiveIndicator> tblInstanceDescriptiveIndicators { get; set; }
        public virtual DbSet<tblInstanceDesignation> tblInstanceDesignations { get; set; }
        public virtual DbSet<tblinstanceDesiredQualification> tblinstanceDesiredQualifications { get; set; }
        public virtual DbSet<tblInstanceExam> tblInstanceExams { get; set; }
        public virtual DbSet<tblInstanceExamSubject> tblInstanceExamSubjects { get; set; }
        public virtual DbSet<tblInstanceExamSubjectTool> tblInstanceExamSubjectTools { get; set; }
        public virtual DbSet<tblInstanceExcessAmount> tblInstanceExcessAmounts { get; set; }
        public virtual DbSet<tblInstanceFeeEnableDisable> tblInstanceFeeEnableDisables { get; set; }
        public virtual DbSet<tblInstanceFeeType> tblInstanceFeeTypes { get; set; }
        public virtual DbSet<tblInstanceFocusArea> tblInstanceFocusAreas { get; set; }
        public virtual DbSet<tblInstanceHoliday> tblInstanceHolidays { get; set; }
        public virtual DbSet<tblInstanceHouse> tblInstanceHouses { get; set; }
        public virtual DbSet<TblInstanceIndividualBookingStatu> TblInstanceIndividualBookingStatus { get; set; }
        public virtual DbSet<tblInstanceLabBatch> tblInstanceLabBatches { get; set; }
        public virtual DbSet<tblInstanceLevelMaintance> tblInstanceLevelMaintances { get; set; }
        public virtual DbSet<tblInstanceLevel> tblInstanceLevels { get; set; }
        public virtual DbSet<tblInstanceMasterRating> tblInstanceMasterRatings { get; set; }
        public virtual DbSet<tblInstanceMedicalIntervention> tblInstanceMedicalInterventions { get; set; }
        public virtual DbSet<tblInstanceMenu> tblInstanceMenus { get; set; }
        public virtual DbSet<tblInstanceMenutest> tblInstanceMenutests { get; set; }
        public virtual DbSet<tblInstancePayrollCategory> tblInstancePayrollCategories { get; set; }
        public virtual DbSet<tblInstancepayrollLevel> tblInstancepayrollLevels { get; set; }
        public virtual DbSet<tblInstancePayrollSubCategory> tblInstancePayrollSubCategories { get; set; }
        public virtual DbSet<tblInstancePreviousArrear> tblInstancePreviousArrears { get; set; }
        public virtual DbSet<tblInstancePrivilege> tblInstancePrivileges { get; set; }
        public virtual DbSet<tblInstanceQuestionBank> tblInstanceQuestionBanks { get; set; }
        public virtual DbSet<tblInstanceQuestionBankAuthorization> tblInstanceQuestionBankAuthorizations { get; set; }
        public virtual DbSet<tblInstanceQuestion> tblInstanceQuestions { get; set; }
        public virtual DbSet<tblInstanceRating> tblInstanceRatings { get; set; }
        public virtual DbSet<tblInstanceReceiptGeneration> tblInstanceReceiptGenerations { get; set; }
        public virtual DbSet<tblInstanceReceiptGeneration_delete> tblInstanceReceiptGeneration_delete { get; set; }
        public virtual DbSet<tblinstanceRecruitmentReason> tblinstanceRecruitmentReasons { get; set; }
        public virtual DbSet<tblinstanceRecruitmentType> tblinstanceRecruitmentTypes { get; set; }
        public virtual DbSet<tblInstanceRequisition> tblInstanceRequisitions { get; set; }
        public virtual DbSet<tblInstanceRole> tblInstanceRoles { get; set; }
        public virtual DbSet<tblInstanceRoleMenu> tblInstanceRoleMenus { get; set; }
        public virtual DbSet<tblInstanceRolePublish> tblInstanceRolePublishes { get; set; }
        public virtual DbSet<tblInstanceRound> tblInstanceRounds { get; set; }
        public virtual DbSet<tblInstanceRounds_Admission> tblInstanceRounds_Admission { get; set; }
        public virtual DbSet<tblInstanceRounds_Heritage> tblInstanceRounds_Heritage { get; set; }
        public virtual DbSet<tblInstanceRoundStatu> tblInstanceRoundStatus { get; set; }
        public virtual DbSet<tblInstanceSalaryAttributeDependance> tblInstanceSalaryAttributeDependances { get; set; }
        public virtual DbSet<tblInstanceSalaryAttribute> tblInstanceSalaryAttributes { get; set; }
        public virtual DbSet<tblInstanceSalaryGenerationDate> tblInstanceSalaryGenerationDates { get; set; }
        public virtual DbSet<tblInstanceStaffHoliday> tblInstanceStaffHolidays { get; set; }
        public virtual DbSet<tblinstanceStageStaus> tblinstanceStageStauses { get; set; }
        public virtual DbSet<tblInstanceStudentQuestion> tblInstanceStudentQuestions { get; set; }
        public virtual DbSet<tblInstanceSubClassification> tblInstanceSubClassifications { get; set; }
        public virtual DbSet<tblInstanceSubjectDisable> tblInstanceSubjectDisables { get; set; }
        public virtual DbSet<tblInstanceSubjectMentor> tblInstanceSubjectMentors { get; set; }
        public virtual DbSet<tblInstanceSubject> tblInstanceSubjects { get; set; }
        public virtual DbSet<tblInstanceSubjects_bomma> tblInstanceSubjects_bomma { get; set; }
        public virtual DbSet<tblInstanceSubjectTool> tblInstanceSubjectTools { get; set; }
        public virtual DbSet<tblInstanceSubjectWiseVideo> tblInstanceSubjectWiseVideos { get; set; }
        public virtual DbSet<tblInstanceSurveyDetail> tblInstanceSurveyDetails { get; set; }
        public virtual DbSet<tblInstanceTemplate> tblInstanceTemplates { get; set; }
        public virtual DbSet<tblInstanceTemplateMaster> tblInstanceTemplateMasters { get; set; }
        public virtual DbSet<tblInstanceTemplate1> tblInstanceTemplates1 { get; set; }
        public virtual DbSet<tblInstanceTheme> tblInstanceThemes { get; set; }
        public virtual DbSet<tblInstanceUserDetail> tblInstanceUserDetails { get; set; }
        public virtual DbSet<tblInstanceUserMenu> tblInstanceUserMenus { get; set; }
        public virtual DbSet<tblInstanceUserRegisterCourse> tblInstanceUserRegisterCourses { get; set; }
        public virtual DbSet<tblInstanceVideoViewDetail> tblInstanceVideoViewDetails { get; set; }
        public virtual DbSet<tblInstanceWiseLeavingReason> tblInstanceWiseLeavingReasons { get; set; }
        public virtual DbSet<tblIntancePayableBranch> tblIntancePayableBranches { get; set; }
        public virtual DbSet<tblInternalMark> tblInternalMarks { get; set; }
        public virtual DbSet<tblInvitation1> tblInvitation1 { get; set; }
        public virtual DbSet<tblIssuedResource> tblIssuedResources { get; set; }
        public virtual DbSet<tblJobType> tblJobTypes { get; set; }
        public virtual DbSet<tblKeyResponsibleArea> tblKeyResponsibleAreas { get; set; }
        public virtual DbSet<tblLanguage> tblLanguages { get; set; }
        public virtual DbSet<tblLastSchoolSubjectGrade> tblLastSchoolSubjectGrades { get; set; }
        public virtual DbSet<tblLastSchoolSubjectGrade_Admission> tblLastSchoolSubjectGrade_Admission { get; set; }
        public virtual DbSet<tblLeaveAllocation> tblLeaveAllocations { get; set; }
        public virtual DbSet<tblLeaveDelegation> tblLeaveDelegations { get; set; }
        public virtual DbSet<tblLeaveDetail> tblLeaveDetails { get; set; }
        public virtual DbSet<tblLeaveLevel> tblLeaveLevels { get; set; }
        public virtual DbSet<tblLeaveTransaction> tblLeaveTransactions { get; set; }
        public virtual DbSet<tblLeaveType> tblLeaveTypes { get; set; }
        public virtual DbSet<tblLessonPlan> tblLessonPlans { get; set; }
        public virtual DbSet<tblLessonPlanExecution> tblLessonPlanExecutions { get; set; }
        public virtual DbSet<tblLessonPlanSession> tblLessonPlanSessions { get; set; }
        public virtual DbSet<tblLessonPlanShortFallIfAny> tblLessonPlanShortFallIfAnies { get; set; }
        public virtual DbSet<tblLevel> tblLevels { get; set; }
        public virtual DbSet<tblLibraryAuthor> tblLibraryAuthors { get; set; }
        public virtual DbSet<tblLibraryBookNo> tblLibraryBookNoes { get; set; }
        public virtual DbSet<tblLibraryPublisher> tblLibraryPublishers { get; set; }
        public virtual DbSet<tblLicenseList> tblLicenseLists { get; set; }
        public virtual DbSet<tblLocation> tblLocations { get; set; }
        public virtual DbSet<tblLogonAudit> tblLogonAudits { get; set; }
        public virtual DbSet<tblLongTermTarget> tblLongTermTargets { get; set; }
        public virtual DbSet<tblLongTermTargetSubject> tblLongTermTargetSubjects { get; set; }
        public virtual DbSet<tblMailAdmissionUser> tblMailAdmissionUsers { get; set; }
        public virtual DbSet<tblMasterAdminConfiguration> tblMasterAdminConfigurations { get; set; }
        public virtual DbSet<tblMasterCategory> tblMasterCategories { get; set; }
        public virtual DbSet<tblMasterCoolLink> tblMasterCoolLinks { get; set; }
        public virtual DbSet<tblMasterMenu> tblMasterMenus { get; set; }
        public virtual DbSet<tblMasterQuote> tblMasterQuotes { get; set; }
        public virtual DbSet<tblMasterRole> tblMasterRoles { get; set; }
        public virtual DbSet<tblMasterRoleMenu> tblMasterRoleMenus { get; set; }
        public virtual DbSet<tblMasterRoundStatu> tblMasterRoundStatus { get; set; }
        public virtual DbSet<tblMasterSlot> tblMasterSlots { get; set; }
        public virtual DbSet<tblMasterSubject> tblMasterSubjects { get; set; }
        public virtual DbSet<tblMasterType> tblMasterTypes { get; set; }
        public virtual DbSet<tblMedium> tblMediums { get; set; }
        public virtual DbSet<tblMembershipType> tblMembershipTypes { get; set; }
        public virtual DbSet<tblMeritDemerit> tblMeritDemerits { get; set; }
        public virtual DbSet<tblMinWagesLocationValue> tblMinWagesLocationValues { get; set; }
        public virtual DbSet<tblModuleType> tblModuleTypes { get; set; }
        public virtual DbSet<tblMonthlyPayslipReceipt> tblMonthlyPayslipReceipts { get; set; }
        public virtual DbSet<tblMonthlyPayslipReceipt_NIMRAJUNEDeleted> tblMonthlyPayslipReceipt_NIMRAJUNEDeleted { get; set; }
        public virtual DbSet<tblmonthlyPayslipReceiptconfirmed> tblmonthlyPayslipReceiptconfirmeds { get; set; }
        public virtual DbSet<tblNatureOfAward> tblNatureOfAwards { get; set; }
        public virtual DbSet<tblNatureOfGuideShip> tblNatureOfGuideShips { get; set; }
        public virtual DbSet<tblNote> tblNotes { get; set; }
        public virtual DbSet<tblNotesAuthorization> tblNotesAuthorizations { get; set; }
        public virtual DbSet<tblOccupation> tblOccupations { get; set; }
        public virtual DbSet<tbloccupationdelted> tbloccupationdelteds { get; set; }
        public virtual DbSet<tblOfficeAdmin> tblOfficeAdmins { get; set; }
        public virtual DbSet<tblOnlineFeePayment> tblOnlineFeePayments { get; set; }
        public virtual DbSet<tblOnlineTest> tblOnlineTests { get; set; }
        public virtual DbSet<tblOnlinetestAuthorisationLatest> tblOnlinetestAuthorisationLatests { get; set; }
        public virtual DbSet<tblOnlineTestAuthorization> tblOnlineTestAuthorizations { get; set; }
        public virtual DbSet<tblOnlineTestAuthorization_ForAdmission> tblOnlineTestAuthorization_ForAdmission { get; set; }
        public virtual DbSet<tblOnlineTestDetail> tblOnlineTestDetails { get; set; }
        public virtual DbSet<tblOnlinetestDetailsLatest> tblOnlinetestDetailsLatests { get; set; }
        public virtual DbSet<tblOnlineTestDuration> tblOnlineTestDurations { get; set; }
        public virtual DbSet<tblOnlineTestInstanceTopic> tblOnlineTestInstanceTopics { get; set; }
        public virtual DbSet<tblOnlinetestLatest> tblOnlinetestLatests { get; set; }
        public virtual DbSet<tblOnlinetestQuestionBank> tblOnlinetestQuestionBanks { get; set; }
        public virtual DbSet<tblOnlinetestQuestionBankDetail> tblOnlinetestQuestionBankDetails { get; set; }
        public virtual DbSet<tblOnlineTestQuestionBankTopic> tblOnlineTestQuestionBankTopics { get; set; }
        public virtual DbSet<tblOnlineTestQuestionnaire> tblOnlineTestQuestionnaires { get; set; }
        public virtual DbSet<tblOnlineTestQuestionnaireAnswer> tblOnlineTestQuestionnaireAnswers { get; set; }
        public virtual DbSet<tblOnlineTestQuestionnaireAnswersLatest> tblOnlineTestQuestionnaireAnswersLatests { get; set; }
        public virtual DbSet<tblOnlineTestQuestionnaireMode> tblOnlineTestQuestionnaireModes { get; set; }
        public virtual DbSet<tblOnlineTestQuestionnaireOption> tblOnlineTestQuestionnaireOptions { get; set; }
        public virtual DbSet<tblOnlinetestQuestion> tblOnlinetestQuestions { get; set; }
        public virtual DbSet<tblOnlineTestRandomQuestionsByUserid> tblOnlineTestRandomQuestionsByUserids { get; set; }
        public virtual DbSet<tblOnlineTestResponse> tblOnlineTestResponses { get; set; }
        public virtual DbSet<tblOnlineTestResponse_Admission> tblOnlineTestResponse_Admission { get; set; }
        public virtual DbSet<tblOnlineTestResponse_Heritage> tblOnlineTestResponse_Heritage { get; set; }
        public virtual DbSet<tblOnlinetestResponseLatest> tblOnlinetestResponseLatests { get; set; }
        public virtual DbSet<tblOnlinetestSection> tblOnlinetestSections { get; set; }
        public virtual DbSet<tblOnlinetestSetDetail> tblOnlinetestSetDetails { get; set; }
        public virtual DbSet<tblOnlinetestSet> tblOnlinetestSets { get; set; }
        public virtual DbSet<tblOnlinetestTemplate> tblOnlinetestTemplates { get; set; }
        public virtual DbSet<tblOnlinetestTemplateSetting> tblOnlinetestTemplateSettings { get; set; }
        public virtual DbSet<tblOperandType> tblOperandTypes { get; set; }
        public virtual DbSet<tblOrderGroup> tblOrderGroups { get; set; }
        public virtual DbSet<tblOrderGroupInventoryUsed> tblOrderGroupInventoryUseds { get; set; }
        public virtual DbSet<tblOrderGroupRelation> tblOrderGroupRelations { get; set; }
        public virtual DbSet<tblOrderStatu> tblOrderStatus { get; set; }
        public virtual DbSet<tblOrientation> tblOrientations { get; set; }
        public virtual DbSet<tblOthersInfo> tblOthersInfoes { get; set; }
        public virtual DbSet<tblOverriddenTimeTable> tblOverriddenTimeTables { get; set; }
        public virtual DbSet<tblPackage> tblPackages { get; set; }
        public virtual DbSet<tblParent> tblParents { get; set; }
        public virtual DbSet<tblParent_Admission> tblParent_Admission { get; set; }
        public virtual DbSet<tblParentAttendance> tblParentAttendances { get; set; }
        public virtual DbSet<tblParentChangeActivity> tblParentChangeActivities { get; set; }
        public virtual DbSet<tblParentdeleted> tblParentdeleteds { get; set; }
        public virtual DbSet<tblParentSubjectsForClassXI> tblParentSubjectsForClassXIs { get; set; }
        public virtual DbSet<tblPaymentGateway_Request> tblPaymentGateway_Request { get; set; }
        public virtual DbSet<tblPaymentGateway_Response> tblPaymentGateway_Response { get; set; }
        public virtual DbSet<tblPaymentMode> tblPaymentModes { get; set; }
        public virtual DbSet<tblPaymentStatus_Admission> tblPaymentStatus_Admission { get; set; }
        public virtual DbSet<tblPaymentStatusDetails_Admission> tblPaymentStatusDetails_Admission { get; set; }
        public virtual DbSet<tblPayrollEmployeeType> tblPayrollEmployeeTypes { get; set; }
        public virtual DbSet<tblPayrollLogin> tblPayrollLogins { get; set; }
        public virtual DbSet<tblPayrollteachingType> tblPayrollteachingTypes { get; set; }
        public virtual DbSet<tblPercentageDetail> tblPercentageDetails { get; set; }
        public virtual DbSet<tblPeriodicity> tblPeriodicities { get; set; }
        public virtual DbSet<tblPersonalDocument> tblPersonalDocuments { get; set; }
        public virtual DbSet<tblPlacementCriteria> tblPlacementCriterias { get; set; }
        public virtual DbSet<tblPlacementProcess> tblPlacementProcesses { get; set; }
        public virtual DbSet<tblPlacementRound> tblPlacementRounds { get; set; }
        public virtual DbSet<tblPlacementRoundStatu> tblPlacementRoundStatus { get; set; }
        public virtual DbSet<tblPlacementRoundStatus_Admission> tblPlacementRoundStatus_Admission { get; set; }
        public virtual DbSet<tblPlacementStatu> tblPlacementStatus { get; set; }
        public virtual DbSet<tblPocketMoney> tblPocketMoneys { get; set; }
        public virtual DbSet<tblPostalCode> tblPostalCodes { get; set; }
        public virtual DbSet<tblPreferredLocation> tblPreferredLocations { get; set; }
        public virtual DbSet<tblPreviousSchoolInfo_Admission> tblPreviousSchoolInfo_Admission { get; set; }
        public virtual DbSet<tblProbationAssessment> tblProbationAssessments { get; set; }
        public virtual DbSet<tblProfileHit> tblProfileHits { get; set; }
        public virtual DbSet<tblProfileStatu> tblProfileStatus { get; set; }
        public virtual DbSet<tblProgressComment> tblProgressComments { get; set; }
        public virtual DbSet<tblProgressReportExamDetail> tblProgressReportExamDetails { get; set; }
        public virtual DbSet<tblProgressRptComment> tblProgressRptComments { get; set; }
        public virtual DbSet<tblProjectDetail> tblProjectDetails { get; set; }
        public virtual DbSet<tblProvisonRequestStatu> tblProvisonRequestStatus { get; set; }
        public virtual DbSet<tblPublicFolderUser> tblPublicFolderUsers { get; set; }
        public virtual DbSet<tblPublishedType> tblPublishedTypes { get; set; }
        public virtual DbSet<tblPublisherDetail> tblPublisherDetails { get; set; }
        public virtual DbSet<tblPWC> tblPWCs { get; set; }
        public virtual DbSet<tblQuestionBankQuestion> tblQuestionBankQuestions { get; set; }
        public virtual DbSet<tblQuestion> tblQuestions { get; set; }
        public virtual DbSet<tblQuote> tblQuotes { get; set; }
        public virtual DbSet<tblRatingType> tblRatingTypes { get; set; }
        public virtual DbSet<tblRecruitmentBranch> tblRecruitmentBranches { get; set; }
        public virtual DbSet<tblRecruitmentRequisition> tblRecruitmentRequisitions { get; set; }
        public virtual DbSet<tblReferenceDetail> tblReferenceDetails { get; set; }
        public virtual DbSet<tblRegistrationUserDetail> tblRegistrationUserDetails { get; set; }
        public virtual DbSet<tblRegistrationUserDetails_AdmissionDocs> tblRegistrationUserDetails_AdmissionDocs { get; set; }
        public virtual DbSet<tblRegistrationUserDetails_AdmissionFeeDetails> tblRegistrationUserDetails_AdmissionFeeDetails { get; set; }
        public virtual DbSet<tblRegistrationUserDetails_Extension> tblRegistrationUserDetails_Extension { get; set; }
        public virtual DbSet<tblRegistrationUserDetails_RegistrationFeeDetails> tblRegistrationUserDetails_RegistrationFeeDetails { get; set; }
        public virtual DbSet<tblRelationshipType> tblRelationshipTypes { get; set; }
        public virtual DbSet<tblReligion> tblReligions { get; set; }
        public virtual DbSet<tblRepairItemDetail> tblRepairItemDetails { get; set; }
        public virtual DbSet<tblReportAbuse> tblReportAbuses { get; set; }
        public virtual DbSet<tblRequestActivityClass> tblRequestActivityClasses { get; set; }
        public virtual DbSet<tblRequestComment> tblRequestComments { get; set; }
        public virtual DbSet<tblRequestIssuedDetail> tblRequestIssuedDetails { get; set; }
        public virtual DbSet<tblRequestRequisitionsList> tblRequestRequisitionsLists { get; set; }
        public virtual DbSet<tblRequestTransportDetail> tblRequestTransportDetails { get; set; }
        public virtual DbSet<tblReservation> tblReservations { get; set; }
        public virtual DbSet<tblReservationInstalment> tblReservationInstalments { get; set; }
        public virtual DbSet<tblResultsMode> tblResultsModes { get; set; }
        public virtual DbSet<tblRIFormSubmittedDemo> tblRIFormSubmittedDemoes { get; set; }
        public virtual DbSet<tblRoute> tblRoutes { get; set; }
        public virtual DbSet<tblRouteStop> tblRouteStops { get; set; }
        public virtual DbSet<tblrptMasterColumn> tblrptMasterColumns { get; set; }
        public virtual DbSet<tblrptMasterColumnsForTransport> tblrptMasterColumnsForTransports { get; set; }
        public virtual DbSet<tblSalaryAdvanceRequest> tblSalaryAdvanceRequests { get; set; }
        public virtual DbSet<tblSalaryAdvanceRequestApproval> tblSalaryAdvanceRequestApprovals { get; set; }
        public virtual DbSet<tblSalaryAttributeMaster> tblSalaryAttributeMasters { get; set; }
        public virtual DbSet<tblSalaryAttribute> tblSalaryAttributes { get; set; }
        public virtual DbSet<tblSalaryAttributesTempInsert> tblSalaryAttributesTempInserts { get; set; }
        public virtual DbSet<tblSalaryIncrementApproval> tblSalaryIncrementApprovals { get; set; }
        public virtual DbSet<tblSalesOfApplication> tblSalesOfApplications { get; set; }
        public virtual DbSet<tblSalIncrement> tblSalIncrements { get; set; }
        public virtual DbSet<tblSampleData> tblSampleDatas { get; set; }
        public virtual DbSet<tblSampleData1> tblSampleData1 { get; set; }
        public virtual DbSet<tblSatSunHoliday> tblSatSunHolidays { get; set; }
        public virtual DbSet<tblScheduledInstance> tblScheduledInstances { get; set; }
        public virtual DbSet<tblScheduleType> tblScheduleTypes { get; set; }
        public virtual DbSet<tblScholarshipdetail> tblScholarshipdetails { get; set; }
        public virtual DbSet<tblScholarshipRegisteredUser> tblScholarshipRegisteredUsers { get; set; }
        public virtual DbSet<tblScholarship> tblScholarships { get; set; }
        public virtual DbSet<tblSector> tblSectors { get; set; }
        public virtual DbSet<tblSector_ProdJuly> tblSector_ProdJuly { get; set; }
        public virtual DbSet<tblSecurityQuestion> tblSecurityQuestions { get; set; }
        public virtual DbSet<tblSeminarDetail> tblSeminarDetails { get; set; }
        public virtual DbSet<tblSeminarType> tblSeminarTypes { get; set; }
        public virtual DbSet<tblShiftAllocationForUser> tblShiftAllocationForUsers { get; set; }
        public virtual DbSet<tblShiftMaster> tblShiftMasters { get; set; }
        public virtual DbSet<tblSiblingDetails_Admission> tblSiblingDetails_Admission { get; set; }
        public virtual DbSet<tblSiteFeedBack> tblSiteFeedBacks { get; set; }
        public virtual DbSet<tblSiteFeedBackType> tblSiteFeedBackTypes { get; set; }
        public virtual DbSet<tblSkill> tblSkills { get; set; }
        public virtual DbSet<tblSkillsofUser_Admission> tblSkillsofUser_Admission { get; set; }
        public virtual DbSet<tblSlotBookingDetail> tblSlotBookingDetails { get; set; }
        public virtual DbSet<tblSlot> tblSlots { get; set; }
        public virtual DbSet<tblSMSDetail> tblSMSDetails { get; set; }
        public virtual DbSet<tblSMSLog> tblSMSLogs { get; set; }
        public virtual DbSet<tblSmsPlaceHolder> tblSmsPlaceHolders { get; set; }
        public virtual DbSet<tblSMSScheduler> tblSMSSchedulers { get; set; }
        public virtual DbSet<tblSmsTemplate> tblSmsTemplates { get; set; }
        public virtual DbSet<tblSpecialEducationNeed> tblSpecialEducationNeeds { get; set; }
        public virtual DbSet<tblSpouseInfo> tblSpouseInfoes { get; set; }
        public virtual DbSet<tblSpParameter> tblSpParameters { get; set; }
        public virtual DbSet<tblSSIStage> tblSSIStages { get; set; }
        public virtual DbSet<tblStaffApproval> tblStaffApprovals { get; set; }
        public virtual DbSet<tblStaffWithdrawalClearancesDetail> tblStaffWithdrawalClearancesDetails { get; set; }
        public virtual DbSet<tblStaffwithdrawalStatu> tblStaffwithdrawalStatus { get; set; }
        public virtual DbSet<tblState> tblStates { get; set; }
        public virtual DbSet<tblStation> tblStations { get; set; }
        public virtual DbSet<tblStationContactPerson> tblStationContactPersons { get; set; }
        public virtual DbSet<tblStatu> tblStatus { get; set; }
        public virtual DbSet<tblStCategory> tblStCategories { get; set; }
        public virtual DbSet<tblStItem> tblStItems { get; set; }
        public virtual DbSet<tblStMenu> tblStMenus { get; set; }
        public virtual DbSet<tblStModuleType> tblStModuleTypes { get; set; }
        public virtual DbSet<tblStOrder> tblStOrders { get; set; }
        public virtual DbSet<tblStore> tblStores { get; set; }
        public virtual DbSet<tblStoredProcedure> tblStoredProcedures { get; set; }
        public virtual DbSet<tblStoreType> tblStoreTypes { get; set; }
        public virtual DbSet<tblStoreUnit> tblStoreUnits { get; set; }
        public virtual DbSet<tblStRole> tblStRoles { get; set; }
        public virtual DbSet<tblStRoleMenu> tblStRoleMenus { get; set; }
        public virtual DbSet<tblStudentAttendanceMonthlyWise> tblStudentAttendanceMonthlyWises { get; set; }
        public virtual DbSet<tblStudentFeedbackOnAssessor> tblStudentFeedbackOnAssessors { get; set; }
        public virtual DbSet<tblStudentLeaveDaysAssessment> tblStudentLeaveDaysAssessments { get; set; }
        public virtual DbSet<tblStudentLeaveDelegation> tblStudentLeaveDelegations { get; set; }
        public virtual DbSet<tblStudentLeaveDetail> tblStudentLeaveDetails { get; set; }
        public virtual DbSet<tblStudentLeaveEmailId> tblStudentLeaveEmailIds { get; set; }
        public virtual DbSet<tblStudentObservation> tblStudentObservations { get; set; }
        public virtual DbSet<tblStudentProfile> tblStudentProfiles { get; set; }
        public virtual DbSet<tblStudentQuota> tblStudentQuotas { get; set; }
        public virtual DbSet<tblStudentSectionTransferActivity> tblStudentSectionTransferActivities { get; set; }
        public virtual DbSet<tblStudentStatu> tblStudentStatus { get; set; }
        public virtual DbSet<tblStudentType> tblStudentTypes { get; set; }
        public virtual DbSet<tblStudentTypeName> tblStudentTypeNames { get; set; }
        public virtual DbSet<tblStudentwiseCourierInfo> tblStudentwiseCourierInfoes { get; set; }
        public virtual DbSet<tblStudentWithdrawalClearanceDetail> tblStudentWithdrawalClearanceDetails { get; set; }
        public virtual DbSet<tblStudentWithdrawalCommentsDetail> tblStudentWithdrawalCommentsDetails { get; set; }
        public virtual DbSet<tblStudentWithdrawalExitInterviewForm> tblStudentWithdrawalExitInterviewForms { get; set; }
        public virtual DbSet<tblStudentwithdrawalForm> tblStudentwithdrawalForms { get; set; }
        public virtual DbSet<tblStudentwithdrawalStatu> tblStudentwithdrawalStatus { get; set; }
        public virtual DbSet<tblStUser> tblStUsers { get; set; }
        public virtual DbSet<tblStVendor> tblStVendors { get; set; }
        public virtual DbSet<tblSubFuncAreaHeritage> tblSubFuncAreaHeritages { get; set; }
        public virtual DbSet<tblSubjectAssociation> tblSubjectAssociations { get; set; }
        public virtual DbSet<tblSubjectMark> tblSubjectMarks { get; set; }
        public virtual DbSet<tblSubjectMarks_bomma> tblSubjectMarks_bomma { get; set; }
        public virtual DbSet<tblSubjectsCommonHeritage> tblSubjectsCommonHeritages { get; set; }
        public virtual DbSet<tblSubjectsHandled> tblSubjectsHandleds { get; set; }
        public virtual DbSet<tblSubjectsHeritage> tblSubjectsHeritages { get; set; }
        public virtual DbSet<tblSubjectsLinkage_OnlineTest> tblSubjectsLinkage_OnlineTest { get; set; }
        public virtual DbSet<tblSubjectToolMark> tblSubjectToolMarks { get; set; }
        public virtual DbSet<tblSubjectTopic> tblSubjectTopics { get; set; }
        public virtual DbSet<tblSubjectTypeName> tblSubjectTypeNames { get; set; }
        public virtual DbSet<tblSuperAdminConfiguration> tblSuperAdminConfigurations { get; set; }
        public virtual DbSet<tblSuperAdminInstanceConfiguration> tblSuperAdminInstanceConfigurations { get; set; }
        public virtual DbSet<tblSupportingTarget> tblSupportingTargets { get; set; }
        public virtual DbSet<tblSurvey> tblSurveys { get; set; }
        public virtual DbSet<tblSurveyAuthorization> tblSurveyAuthorizations { get; set; }
        public virtual DbSet<tblSurveyComment> tblSurveyComments { get; set; }
        public virtual DbSet<tblSurveyFormQuestion> tblSurveyFormQuestions { get; set; }
        public virtual DbSet<tblSurveyMark> tblSurveyMarks { get; set; }
        public virtual DbSet<tblSurveyOption> tblSurveyOptions { get; set; }
        public virtual DbSet<tblSurveyQuesComment> tblSurveyQuesComments { get; set; }
        public virtual DbSet<tblSurveyQuestionnaire> tblSurveyQuestionnaires { get; set; }
        public virtual DbSet<tblSurveyRating> tblSurveyRatings { get; set; }
        public virtual DbSet<tblSurveyType> tblSurveyTypes { get; set; }
        public virtual DbSet<tblTaxCaliculation> tblTaxCaliculations { get; set; }
        public virtual DbSet<tblTaxDeductionByQuarter> tblTaxDeductionByQuarters { get; set; }
        public virtual DbSet<tblTaxDeductionByQuarter_User> tblTaxDeductionByQuarter_User { get; set; }
        public virtual DbSet<tblTaxExemptionsLimit> tblTaxExemptionsLimits { get; set; }
        public virtual DbSet<tblTaxExtraInvestment> tblTaxExtraInvestments { get; set; }
        public virtual DbSet<tblTaxParticularsDetail> tblTaxParticularsDetails { get; set; }
        public virtual DbSet<tblTCApplicationDetail> tblTCApplicationDetails { get; set; }
        public virtual DbSet<tblTCComment> tblTCComments { get; set; }
        public virtual DbSet<tblTCDetail> tblTCDetails { get; set; }
        public virtual DbSet<tblTemplateDescription> tblTemplateDescriptions { get; set; }
        public virtual DbSet<tblTemplateMaster> tblTemplateMasters { get; set; }
        public virtual DbSet<tblTemplate> tblTemplates { get; set; }
        public virtual DbSet<tblTemplateType> tblTemplateTypes { get; set; }
        public virtual DbSet<tblTimeTable> tblTimeTables { get; set; }
        public virtual DbSet<tblTimeTableDetail> tblTimeTableDetails { get; set; }
        public virtual DbSet<tblTimeTableType> tblTimeTableTypes { get; set; }
        public virtual DbSet<tblTimeTableTypePeriod> tblTimeTableTypePeriods { get; set; }
        public virtual DbSet<tblTopicAreaHeritage> tblTopicAreaHeritages { get; set; }
        public virtual DbSet<tblTrainingCenter> tblTrainingCenters { get; set; }
        public virtual DbSet<tblTrainingLocation> tblTrainingLocations { get; set; }
        public virtual DbSet<tblTrainingPartner> tblTrainingPartners { get; set; }
        public virtual DbSet<tblTransportation> tblTransportations { get; set; }
        public virtual DbSet<tblTransportHireExpense> tblTransportHireExpenses { get; set; }
        public virtual DbSet<tblTransportSalaryDetail> tblTransportSalaryDetails { get; set; }
        public virtual DbSet<tblTypingTestAssessmentUserWise> tblTypingTestAssessmentUserWises { get; set; }
        public virtual DbSet<tblUniversity> tblUniversities { get; set; }
        public virtual DbSet<tblUniversityAcademicYear> tblUniversityAcademicYears { get; set; }
        public virtual DbSet<tblUniversityClassification> tblUniversityClassifications { get; set; }
        public virtual DbSet<tblUniversityQuestionBank> tblUniversityQuestionBanks { get; set; }
        public virtual DbSet<tblUniversitySubClassification> tblUniversitySubClassifications { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
        public virtual DbSet<tblUser_bomma> tblUser_bomma { get; set; }
        public virtual DbSet<tblUser_PreviousSchoolInfo> tblUser_PreviousSchoolInfo { get; set; }
        public virtual DbSet<tblUserAdmission_Points> tblUserAdmission_Points { get; set; }
        public virtual DbSet<tblUserAdmissionDocument> tblUserAdmissionDocuments { get; set; }
        public virtual DbSet<tblUserAdmissionStatu> tblUserAdmissionStatus { get; set; }
        public virtual DbSet<tblUserAdmissionStatusMOD> tblUserAdmissionStatusMODs { get; set; }
        public virtual DbSet<tblUserAnswer> tblUserAnswers { get; set; }
        public virtual DbSet<tblUserBatchStatus_Admission> tblUserBatchStatus_Admission { get; set; }
        public virtual DbSet<tblUserBatchStatus_Heritage> tblUserBatchStatus_Heritage { get; set; }
        public virtual DbSet<tblUserBookedSlot> tblUserBookedSlots { get; set; }
        public virtual DbSet<tblUserCareerCounselling> tblUserCareerCounsellings { get; set; }
        public virtual DbSet<tblUserCareerCounselling_Admission> tblUserCareerCounselling_Admission { get; set; }
        public virtual DbSet<tblUserCertificate> tblUserCertificates { get; set; }
        public virtual DbSet<tblUserComment> tblUserComments { get; set; }
        public virtual DbSet<tblUserCompany> tblUserCompanies { get; set; }
        public virtual DbSet<tblUserDeleteAccess> tblUserDeleteAccesses { get; set; }
        public virtual DbSet<tbluserdeleted> tbluserdeleteds { get; set; }
        public virtual DbSet<tblUserDiseas> tblUserDiseases { get; set; }
        public virtual DbSet<tblUserECA> tblUserECAs { get; set; }
        public virtual DbSet<tblUserExtension> tblUserExtensions { get; set; }
        public virtual DbSet<tblUserExtension_RIG_ICFE> tblUserExtension_RIG_ICFE { get; set; }
        public virtual DbSet<tblUserFee> tblUserFees { get; set; }
        public virtual DbSet<tblUserFee_bomma> tblUserFee_bomma { get; set; }
        public virtual DbSet<tblUserFee_delete> tblUserFee_delete { get; set; }
        public virtual DbSet<tblUserFee_ICFE_15th_night> tblUserFee_ICFE_15th_night { get; set; }
        public virtual DbSet<tblUserFeedBackDetail> tblUserFeedBackDetails { get; set; }
        public virtual DbSet<tblUserFolder> tblUserFolders { get; set; }
        public virtual DbSet<tblUserFoodOffering> tblUserFoodOfferings { get; set; }
        public virtual DbSet<tblUserGroup> tblUserGroups { get; set; }
        public virtual DbSet<tblUserHealthDetail> tblUserHealthDetails { get; set; }
        public virtual DbSet<tblUserHealthInformation_Admission> tblUserHealthInformation_Admission { get; set; }
        public virtual DbSet<tblUserHostelVisitor> tblUserHostelVisitors { get; set; }
        public virtual DbSet<tblUserHostelVisitor_Admission> tblUserHostelVisitor_Admission { get; set; }
        public virtual DbSet<tblUserHostelVisitor_bomma> tblUserHostelVisitor_bomma { get; set; }
        public virtual DbSet<tblUserLoginDate> tblUserLoginDates { get; set; }
        public virtual DbSet<tblUseronlinetestDetail> tblUseronlinetestDetails { get; set; }
        public virtual DbSet<tblUseronlinetestDetailsforAdmission> tblUseronlinetestDetailsforAdmissions { get; set; }
        public virtual DbSet<tblUserOnlineTestGeneratedQuestion> tblUserOnlineTestGeneratedQuestions { get; set; }
        public virtual DbSet<tblUserOtherDetail> tblUserOtherDetails { get; set; }
        public virtual DbSet<tblUserParent> tblUserParents { get; set; }
        public virtual DbSet<tblUserParent_Admission> tblUserParent_Admission { get; set; }
        public virtual DbSet<tblUserParent_bomma> tblUserParent_bomma { get; set; }
        public virtual DbSet<tbluserparentdeleted> tbluserparentdeleteds { get; set; }
        public virtual DbSet<tblUserReport> tblUserReports { get; set; }
        public virtual DbSet<tblUserScholarship> tblUserScholarships { get; set; }
        public virtual DbSet<tblUserSkill> tblUserSkills { get; set; }
        public virtual DbSet<tblUserStatu> tblUserStatus { get; set; }
        public virtual DbSet<tblUserSurveyDetail> tblUserSurveyDetails { get; set; }
        public virtual DbSet<tblUserVideo> tblUserVideos { get; set; }
        public virtual DbSet<tblUserWiseRollEnrollementNumber> tblUserWiseRollEnrollementNumbers { get; set; }
        public virtual DbSet<TblVaccination> TblVaccinations { get; set; }
        public virtual DbSet<TblVaccination_Admission> TblVaccination_Admission { get; set; }
        public virtual DbSet<TblVaccinationExtension> TblVaccinationExtensions { get; set; }
        public virtual DbSet<tblVaccinationNew_Admission> tblVaccinationNew_Admission { get; set; }
        public virtual DbSet<tblWebCast> tblWebCasts { get; set; }
        public virtual DbSet<tblWeekHoliday> tblWeekHolidays { get; set; }
        public virtual DbSet<tblWeekSchedule> tblWeekSchedules { get; set; }
        public virtual DbSet<tblWizzardMaster> tblWizzardMasters { get; set; }
        public virtual DbSet<tblWizzardTarget> tblWizzardTargets { get; set; }
        public virtual DbSet<tblWorkExpDetail> tblWorkExpDetails { get; set; }
        public virtual DbSet<tblWorkShopMasterTable> tblWorkShopMasterTables { get; set; }
        public virtual DbSet<tblZonePoint> tblZonePoints { get; set; }
        public virtual DbSet<tblZonePoints_ProdJuly> tblZonePoints_ProdJuly { get; set; }
        public virtual DbSet<TempAssignSubjectTool> TempAssignSubjectTools { get; set; }
        public virtual DbSet<tempBatchWiseCount> tempBatchWiseCounts { get; set; }
        public virtual DbSet<Heritage_ActiveStudents> Heritage_ActiveStudents { get; set; }
        public virtual DbSet<HeritageParentUserNamesBackupApr2014> HeritageParentUserNamesBackupApr2014 { get; set; }
        public virtual DbSet<ICFEDE_tblFeeTerms> ICFEDE_tblFeeTerms { get; set; }
        public virtual DbSet<ICFEDE_tblFeeTypeTerm> ICFEDE_tblFeeTypeTerm { get; set; }
        public virtual DbSet<ICFEDE_tblInstanceClassification> ICFEDE_tblInstanceClassification { get; set; }
        public virtual DbSet<ICFEDE_tblInstanceFeeSemesterwise> ICFEDE_tblInstanceFeeSemesterwise { get; set; }
        public virtual DbSet<ICFEDE_tblInstanceFeeTypes> ICFEDE_tblInstanceFeeTypes { get; set; }
        public virtual DbSet<ICFEDE_tblInstanceSubClassification> ICFEDE_tblInstanceSubClassification { get; set; }
        public virtual DbSet<KMS_tblinstanceclassification> KMS_tblinstanceclassification { get; set; }
        public virtual DbSet<KMS_tblInstanceSubClassification> KMS_tblInstanceSubClassification { get; set; }
        public virtual DbSet<KMS_tblParent> KMS_tblParent { get; set; }
        public virtual DbSet<Maxfort_matched25_june> Maxfort_matched25_june { get; set; }
        public virtual DbSet<PermissionsHeritage> PermissionsHeritages { get; set; }
        public virtual DbSet<sampleRole> sampleRoles { get; set; }
        public virtual DbSet<sampleUserRole> sampleUserRoles { get; set; }
        public virtual DbSet<sampleUser> sampleUsers { get; set; }
        public virtual DbSet<SearchTMP> SearchTMPs { get; set; }
        public virtual DbSet<STEPS_STUDATA> STEPS_STUDATA { get; set; }
        public virtual DbSet<tblAdmissionArea> tblAdmissionAreas { get; set; }
        public virtual DbSet<tblAreapoint> tblAreapoints { get; set; }
        public virtual DbSet<tblAssignSubjectTools_7thFeb2013> tblAssignSubjectTools_7thFeb2013 { get; set; }
        public virtual DbSet<tblChallanIdentificationNumber> tblChallanIdentificationNumbers { get; set; }
        public virtual DbSet<tblChallanIdentificationNumber_User> tblChallanIdentificationNumber_User { get; set; }
        public virtual DbSet<tblcheckinout_bioenable> tblcheckinout_bioenable { get; set; }
        public virtual DbSet<tblClassRoom> tblClassRooms { get; set; }
        public virtual DbSet<tbldependedsalaryAttributeAmounts_bkpSep_30> tbldependedsalaryAttributeAmounts_bkpSep_30 { get; set; }
        public virtual DbSet<tbldependedsalaryAttributeAmountsTempInsert_bkpSep_30> tbldependedsalaryAttributeAmountsTempInsert_bkpSep_30 { get; set; }
        public virtual DbSet<tblEducationDetailsAdmission> tblEducationDetailsAdmissions { get; set; }
        public virtual DbSet<tblEnquiryChangeActivity> tblEnquiryChangeActivities { get; set; }
        public virtual DbSet<tblEnquiryDetails_BackUp22Sep2014> tblEnquiryDetails_BackUp22Sep2014 { get; set; }
        public virtual DbSet<tblEnquirySalesCallDetail> tblEnquirySalesCallDetails { get; set; }
        public virtual DbSet<tblExamDuration> tblExamDurations { get; set; }
        public virtual DbSet<tblFeeInstallments_ChequeBak> tblFeeInstallments_ChequeBak { get; set; }
        public virtual DbSet<tblFeeInstallmentsBak> tblFeeInstallmentsBaks { get; set; }
        public virtual DbSet<tblHubMaster> tblHubMasters { get; set; }
        public virtual DbSet<tblinstance_Backup14Sep> tblinstance_Backup14Sep { get; set; }
        public virtual DbSet<tblInstanceColumnsForTransport> tblInstanceColumnsForTransports { get; set; }
        public virtual DbSet<tblInstanceExamSubjects_12thFeb2013> tblInstanceExamSubjects_12thFeb2013 { get; set; }
        public virtual DbSet<tblInstanceExamSubjects_Maxfort_10Dec> tblInstanceExamSubjects_Maxfort_10Dec { get; set; }
        public virtual DbSet<tblInstanceExamSubjectTools_Maxfort_10Dec> tblInstanceExamSubjectTools_Maxfort_10Dec { get; set; }
        public virtual DbSet<tblInstanceExcessAmountBak> tblInstanceExcessAmountBaks { get; set; }
        public virtual DbSet<tblInstanceFeeSemesterwise> tblInstanceFeeSemesterwises { get; set; }
        public virtual DbSet<tblInstanceMenu_29Dec> tblInstanceMenu_29Dec { get; set; }
        public virtual DbSet<tblInstanceReceiptGenerationBak> tblInstanceReceiptGenerationBaks { get; set; }
        public virtual DbSet<tblInstanceRoleMenu_29Dec> tblInstanceRoleMenu_29Dec { get; set; }
        public virtual DbSet<tblinstancerolemenu_Backup14Sep> tblinstancerolemenu_Backup14Sep { get; set; }
        public virtual DbSet<tblInstanceUserMenu_29Dec> tblInstanceUserMenu_29Dec { get; set; }
        public virtual DbSet<tblLeaveAllocation_14thMay2014> tblLeaveAllocation_14thMay2014 { get; set; }
        public virtual DbSet<tblLeaveAllocation_15thApril2014> tblLeaveAllocation_15thApril2014 { get; set; }
        public virtual DbSet<tblLeaveAllocation_9thSep2014> tblLeaveAllocation_9thSep2014 { get; set; }
        public virtual DbSet<tblLeaveDetails_bkpHeritage> tblLeaveDetails_bkpHeritage { get; set; }
        public virtual DbSet<tblLeaveDetails_bkpHeritage2> tblLeaveDetails_bkpHeritage2 { get; set; }
        public virtual DbSet<tblLeaveRestriction> tblLeaveRestrictions { get; set; }
        public virtual DbSet<tblLeaveTransactions_bkpHeritage> tblLeaveTransactions_bkpHeritage { get; set; }
        public virtual DbSet<tblLeaveTransactions_bkpHeritage2> tblLeaveTransactions_bkpHeritage2 { get; set; }
        public virtual DbSet<tblLevelMaster> tblLevelMasters { get; set; }
        public virtual DbSet<tblLocationChangeActivity> tblLocationChangeActivities { get; set; }
        public virtual DbSet<tblOnlineTestResponse_Admission_ADSTest> tblOnlineTestResponse_Admission_ADSTest { get; set; }
        public virtual DbSet<tblParent_HeritageNewAdmissions> tblParent_HeritageNewAdmissions { get; set; }
        public virtual DbSet<tblParenttemp> tblParenttemps { get; set; }
        public virtual DbSet<tblRegistrationUserDetails_FirstUpperase> tblRegistrationUserDetails_FirstUpperase { get; set; }
        public virtual DbSet<tblRegusers_Passwords_52Users> tblRegusers_Passwords_52Users { get; set; }
        public virtual DbSet<tblRoleWiseStaffForAdmission> tblRoleWiseStaffForAdmissions { get; set; }
        public virtual DbSet<tblRouteFee> tblRouteFees { get; set; }
        public virtual DbSet<tblSalaryAttributeMaster_bkpbeforesal> tblSalaryAttributeMaster_bkpbeforesal { get; set; }
        public virtual DbSet<tblSalaryAttributes_bkp17_MAy_2013> tblSalaryAttributes_bkp17_MAy_2013 { get; set; }
        public virtual DbSet<tblSalaryAttributes_bkpbeforeAuthid2change> tblSalaryAttributes_bkpbeforeAuthid2change { get; set; }
        public virtual DbSet<tblSector_3rdSep2014> tblSector_3rdSep2014 { get; set; }
        public virtual DbSet<tblSector_5thSep2014> tblSector_5thSep2014 { get; set; }
        public virtual DbSet<tblSectorMaster> tblSectorMasters { get; set; }
        public virtual DbSet<tblSessionMaster> tblSessionMasters { get; set; }
        public virtual DbSet<tblSiblingRelationDetails_Admission> tblSiblingRelationDetails_Admission { get; set; }
        public virtual DbSet<tblStudentLeaveApprover> tblStudentLeaveApprovers { get; set; }
        public virtual DbSet<tblSubjectMarks_Maxfort_10Dec> tblSubjectMarks_Maxfort_10Dec { get; set; }
        public virtual DbSet<tblSubjectsLinkage_OnlineTest_15Dec2014> tblSubjectsLinkage_OnlineTest_15Dec2014 { get; set; }
        public virtual DbSet<tblSubjectToolMarks_Maxfort_10Dec> tblSubjectToolMarks_Maxfort_10Dec { get; set; }
        public virtual DbSet<tblTrainingCentreDetail> tblTrainingCentreDetails { get; set; }
        public virtual DbSet<tblTrainingCentreDoc> tblTrainingCentreDocs { get; set; }
        public virtual DbSet<tblTrainingCentreMaster> tblTrainingCentreMasters { get; set; }
        public virtual DbSet<tblTransAddressChanged> tblTransAddressChangeds { get; set; }
        public virtual DbSet<tblTransEmployeeCategory> tblTransEmployeeCategories { get; set; }
        public virtual DbSet<tblTransportForm> tblTransportForms { get; set; }
        public virtual DbSet<tblTransportInvoiceStatu> tblTransportInvoiceStatus { get; set; }
        public virtual DbSet<tblTransportStatu> tblTransportStatus { get; set; }
        public virtual DbSet<tblUserExitForm> tblUserExitForms { get; set; }
        public virtual DbSet<tblUserExtension_bkpHeritage> tblUserExtension_bkpHeritage { get; set; }
        public virtual DbSet<tblUserExtension_bkpHeritage2> tblUserExtension_bkpHeritage2 { get; set; }
        public virtual DbSet<tblUserFeeBak> tblUserFeeBaks { get; set; }
        public virtual DbSet<tblusermaxfortbak> tblusermaxfortbaks { get; set; }
        public virtual DbSet<tblUserOrganizationAdmission> tblUserOrganizationAdmissions { get; set; }
        public virtual DbSet<tblUserWiseKRA> tblUserWiseKRAS { get; set; }
        public virtual DbSet<tblZonePoints_3rdSep2014> tblZonePoints_3rdSep2014 { get; set; }
        public virtual DbSet<tblZonePoints_5thSep2014> tblZonePoints_5thSep2014 { get; set; }
        public virtual DbSet<tmp> tmps { get; set; }
        public virtual DbSet<TranportTemp> TranportTemps { get; set; }
    
        public virtual ObjectResult<stpGetLoginDetails_Result> stpGetLoginDetails(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpGetLoginDetails_Result>("stpGetLoginDetails", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> stp_tblTrainingCenter_Delete(Nullable<int> trainingcenterId)
        {
            var trainingcenterIdParameter = trainingcenterId.HasValue ?
                new ObjectParameter("trainingcenterId", trainingcenterId) :
                new ObjectParameter("trainingcenterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("stp_tblTrainingCenter_Delete", trainingcenterIdParameter);
        }
    
        public virtual int stp_tblTrainingCenter_Insert(string tCName, Nullable<int> trainingPartnerId, string tCIDSmartID, string sDMSID, string centerAddress, string centerDescription, Nullable<System.DateTime> tCApprovalStartDate, string pocName, string pocMobileNo, Nullable<int> stateId, string city, Nullable<System.DateTime> createddate, Nullable<int> createdBy, Nullable<System.DateTime> updatedate, Nullable<int> updatedby)
        {
            var tCNameParameter = tCName != null ?
                new ObjectParameter("TCName", tCName) :
                new ObjectParameter("TCName", typeof(string));
    
            var trainingPartnerIdParameter = trainingPartnerId.HasValue ?
                new ObjectParameter("TrainingPartnerId", trainingPartnerId) :
                new ObjectParameter("TrainingPartnerId", typeof(int));
    
            var tCIDSmartIDParameter = tCIDSmartID != null ?
                new ObjectParameter("TCIDSmartID", tCIDSmartID) :
                new ObjectParameter("TCIDSmartID", typeof(string));
    
            var sDMSIDParameter = sDMSID != null ?
                new ObjectParameter("SDMSID", sDMSID) :
                new ObjectParameter("SDMSID", typeof(string));
    
            var centerAddressParameter = centerAddress != null ?
                new ObjectParameter("CenterAddress", centerAddress) :
                new ObjectParameter("CenterAddress", typeof(string));
    
            var centerDescriptionParameter = centerDescription != null ?
                new ObjectParameter("CenterDescription", centerDescription) :
                new ObjectParameter("CenterDescription", typeof(string));
    
            var tCApprovalStartDateParameter = tCApprovalStartDate.HasValue ?
                new ObjectParameter("TCApprovalStartDate", tCApprovalStartDate) :
                new ObjectParameter("TCApprovalStartDate", typeof(System.DateTime));
    
            var pocNameParameter = pocName != null ?
                new ObjectParameter("PocName", pocName) :
                new ObjectParameter("PocName", typeof(string));
    
            var pocMobileNoParameter = pocMobileNo != null ?
                new ObjectParameter("PocMobileNo", pocMobileNo) :
                new ObjectParameter("PocMobileNo", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedateParameter = updatedate.HasValue ?
                new ObjectParameter("Updatedate", updatedate) :
                new ObjectParameter("Updatedate", typeof(System.DateTime));
    
            var updatedbyParameter = updatedby.HasValue ?
                new ObjectParameter("Updatedby", updatedby) :
                new ObjectParameter("Updatedby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_tblTrainingCenter_Insert", tCNameParameter, trainingPartnerIdParameter, tCIDSmartIDParameter, sDMSIDParameter, centerAddressParameter, centerDescriptionParameter, tCApprovalStartDateParameter, pocNameParameter, pocMobileNoParameter, stateIdParameter, cityParameter, createddateParameter, createdByParameter, updatedateParameter, updatedbyParameter);
        }
    
        public virtual ObjectResult<stp_tblTrainingCenter_Search_Result> stp_tblTrainingCenter_Search(string tCName, Nullable<int> tPId, string smartId, string sDMSId, Nullable<int> stateId, string city)
        {
            var tCNameParameter = tCName != null ?
                new ObjectParameter("TCName", tCName) :
                new ObjectParameter("TCName", typeof(string));
    
            var tPIdParameter = tPId.HasValue ?
                new ObjectParameter("TPId", tPId) :
                new ObjectParameter("TPId", typeof(int));
    
            var smartIdParameter = smartId != null ?
                new ObjectParameter("SmartId", smartId) :
                new ObjectParameter("SmartId", typeof(string));
    
            var sDMSIdParameter = sDMSId != null ?
                new ObjectParameter("SDMSId", sDMSId) :
                new ObjectParameter("SDMSId", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_tblTrainingCenter_Search_Result>("stp_tblTrainingCenter_Search", tCNameParameter, tPIdParameter, smartIdParameter, sDMSIdParameter, stateIdParameter, cityParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> stp_tblTrainingCenter_Update(Nullable<int> trainingCenterId, string trainingCenterName, Nullable<int> trainingPartnerId, string smartId, string sDMSId, string centerAddress, string centerDescription, Nullable<System.DateTime> startDate, string pOCName, string pOCMobileNo, Nullable<int> stateId, string city, Nullable<System.DateTime> createddate, Nullable<int> createdBy, Nullable<System.DateTime> updatedate, Nullable<int> updatedby)
        {
            var trainingCenterIdParameter = trainingCenterId.HasValue ?
                new ObjectParameter("TrainingCenterId", trainingCenterId) :
                new ObjectParameter("TrainingCenterId", typeof(int));
    
            var trainingCenterNameParameter = trainingCenterName != null ?
                new ObjectParameter("TrainingCenterName", trainingCenterName) :
                new ObjectParameter("TrainingCenterName", typeof(string));
    
            var trainingPartnerIdParameter = trainingPartnerId.HasValue ?
                new ObjectParameter("TrainingPartnerId", trainingPartnerId) :
                new ObjectParameter("TrainingPartnerId", typeof(int));
    
            var smartIdParameter = smartId != null ?
                new ObjectParameter("SmartId", smartId) :
                new ObjectParameter("SmartId", typeof(string));
    
            var sDMSIdParameter = sDMSId != null ?
                new ObjectParameter("SDMSId", sDMSId) :
                new ObjectParameter("SDMSId", typeof(string));
    
            var centerAddressParameter = centerAddress != null ?
                new ObjectParameter("CenterAddress", centerAddress) :
                new ObjectParameter("CenterAddress", typeof(string));
    
            var centerDescriptionParameter = centerDescription != null ?
                new ObjectParameter("CenterDescription", centerDescription) :
                new ObjectParameter("CenterDescription", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var pOCNameParameter = pOCName != null ?
                new ObjectParameter("POCName", pOCName) :
                new ObjectParameter("POCName", typeof(string));
    
            var pOCMobileNoParameter = pOCMobileNo != null ?
                new ObjectParameter("POCMobileNo", pOCMobileNo) :
                new ObjectParameter("POCMobileNo", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedateParameter = updatedate.HasValue ?
                new ObjectParameter("Updatedate", updatedate) :
                new ObjectParameter("Updatedate", typeof(System.DateTime));
    
            var updatedbyParameter = updatedby.HasValue ?
                new ObjectParameter("Updatedby", updatedby) :
                new ObjectParameter("Updatedby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("stp_tblTrainingCenter_Update", trainingCenterIdParameter, trainingCenterNameParameter, trainingPartnerIdParameter, smartIdParameter, sDMSIdParameter, centerAddressParameter, centerDescriptionParameter, startDateParameter, pOCNameParameter, pOCMobileNoParameter, stateIdParameter, cityParameter, createddateParameter, createdByParameter, updatedateParameter, updatedbyParameter);
        }
    
        public virtual ObjectResult<stp_tblTrainingCenterDetails_SELById_Result> stp_tblTrainingCenterDetails_SELById(Nullable<int> trainingCenterId)
        {
            var trainingCenterIdParameter = trainingCenterId.HasValue ?
                new ObjectParameter("TrainingCenterId", trainingCenterId) :
                new ObjectParameter("TrainingCenterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_tblTrainingCenterDetails_SELById_Result>("stp_tblTrainingCenterDetails_SELById", trainingCenterIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> stp_tblTrainingPartner_Delete(Nullable<int> trainingpartnerId)
        {
            var trainingpartnerIdParameter = trainingpartnerId.HasValue ?
                new ObjectParameter("trainingpartnerId", trainingpartnerId) :
                new ObjectParameter("trainingpartnerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("stp_tblTrainingPartner_Delete", trainingpartnerIdParameter);
        }
    
        public virtual int stp_tblTrainingPartner_Insert(string trainingPartnerName, string trainingPartnerCode, string pOCName, string tPAddress, string tPDescription, Nullable<int> noOfCenters, string pOCMobileNo, Nullable<int> stateId, string city, Nullable<System.DateTime> createddate, Nullable<int> createdBy, Nullable<System.DateTime> updatedate, Nullable<int> updatedby)
        {
            var trainingPartnerNameParameter = trainingPartnerName != null ?
                new ObjectParameter("TrainingPartnerName", trainingPartnerName) :
                new ObjectParameter("TrainingPartnerName", typeof(string));
    
            var trainingPartnerCodeParameter = trainingPartnerCode != null ?
                new ObjectParameter("TrainingPartnerCode", trainingPartnerCode) :
                new ObjectParameter("TrainingPartnerCode", typeof(string));
    
            var pOCNameParameter = pOCName != null ?
                new ObjectParameter("POCName", pOCName) :
                new ObjectParameter("POCName", typeof(string));
    
            var tPAddressParameter = tPAddress != null ?
                new ObjectParameter("TPAddress", tPAddress) :
                new ObjectParameter("TPAddress", typeof(string));
    
            var tPDescriptionParameter = tPDescription != null ?
                new ObjectParameter("TPDescription", tPDescription) :
                new ObjectParameter("TPDescription", typeof(string));
    
            var noOfCentersParameter = noOfCenters.HasValue ?
                new ObjectParameter("NoOfCenters", noOfCenters) :
                new ObjectParameter("NoOfCenters", typeof(int));
    
            var pOCMobileNoParameter = pOCMobileNo != null ?
                new ObjectParameter("POCMobileNo", pOCMobileNo) :
                new ObjectParameter("POCMobileNo", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedateParameter = updatedate.HasValue ?
                new ObjectParameter("Updatedate", updatedate) :
                new ObjectParameter("Updatedate", typeof(System.DateTime));
    
            var updatedbyParameter = updatedby.HasValue ?
                new ObjectParameter("Updatedby", updatedby) :
                new ObjectParameter("Updatedby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_tblTrainingPartner_Insert", trainingPartnerNameParameter, trainingPartnerCodeParameter, pOCNameParameter, tPAddressParameter, tPDescriptionParameter, noOfCentersParameter, pOCMobileNoParameter, stateIdParameter, cityParameter, createddateParameter, createdByParameter, updatedateParameter, updatedbyParameter);
        }
    
        public virtual ObjectResult<stp_tblTrainingPartner_Search_Result> stp_tblTrainingPartner_Search(string trainingPartnerName, string trainingPartnerCode, Nullable<int> stateId, string city)
        {
            var trainingPartnerNameParameter = trainingPartnerName != null ?
                new ObjectParameter("TrainingPartnerName", trainingPartnerName) :
                new ObjectParameter("TrainingPartnerName", typeof(string));
    
            var trainingPartnerCodeParameter = trainingPartnerCode != null ?
                new ObjectParameter("TrainingPartnerCode", trainingPartnerCode) :
                new ObjectParameter("TrainingPartnerCode", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_tblTrainingPartner_Search_Result>("stp_tblTrainingPartner_Search", trainingPartnerNameParameter, trainingPartnerCodeParameter, stateIdParameter, cityParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> stp_tblTrainingPartner_Update(Nullable<int> trainingPartnerId, string trainingPartnerName, string trainingPartnerCode, string pOCName, string tPAddress, string tPDescription, Nullable<int> noOfCenters, string pOCMobileNo, Nullable<int> stateId, string city, Nullable<System.DateTime> createddate, Nullable<int> createdBy, Nullable<System.DateTime> updatedate, Nullable<int> updatedby)
        {
            var trainingPartnerIdParameter = trainingPartnerId.HasValue ?
                new ObjectParameter("TrainingPartnerId", trainingPartnerId) :
                new ObjectParameter("TrainingPartnerId", typeof(int));
    
            var trainingPartnerNameParameter = trainingPartnerName != null ?
                new ObjectParameter("TrainingPartnerName", trainingPartnerName) :
                new ObjectParameter("TrainingPartnerName", typeof(string));
    
            var trainingPartnerCodeParameter = trainingPartnerCode != null ?
                new ObjectParameter("TrainingPartnerCode", trainingPartnerCode) :
                new ObjectParameter("TrainingPartnerCode", typeof(string));
    
            var pOCNameParameter = pOCName != null ?
                new ObjectParameter("POCName", pOCName) :
                new ObjectParameter("POCName", typeof(string));
    
            var tPAddressParameter = tPAddress != null ?
                new ObjectParameter("TPAddress", tPAddress) :
                new ObjectParameter("TPAddress", typeof(string));
    
            var tPDescriptionParameter = tPDescription != null ?
                new ObjectParameter("TPDescription", tPDescription) :
                new ObjectParameter("TPDescription", typeof(string));
    
            var noOfCentersParameter = noOfCenters.HasValue ?
                new ObjectParameter("NoOfCenters", noOfCenters) :
                new ObjectParameter("NoOfCenters", typeof(int));
    
            var pOCMobileNoParameter = pOCMobileNo != null ?
                new ObjectParameter("POCMobileNo", pOCMobileNo) :
                new ObjectParameter("POCMobileNo", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedateParameter = updatedate.HasValue ?
                new ObjectParameter("Updatedate", updatedate) :
                new ObjectParameter("Updatedate", typeof(System.DateTime));
    
            var updatedbyParameter = updatedby.HasValue ?
                new ObjectParameter("Updatedby", updatedby) :
                new ObjectParameter("Updatedby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("stp_tblTrainingPartner_Update", trainingPartnerIdParameter, trainingPartnerNameParameter, trainingPartnerCodeParameter, pOCNameParameter, tPAddressParameter, tPDescriptionParameter, noOfCentersParameter, pOCMobileNoParameter, stateIdParameter, cityParameter, createddateParameter, createdByParameter, updatedateParameter, updatedbyParameter);
        }
    
        public virtual ObjectResult<stp_tblTrainingPartnerDetails_SELById_Result> stp_tblTrainingPartnerDetails_SELById(Nullable<int> trainingPartnerId)
        {
            var trainingPartnerIdParameter = trainingPartnerId.HasValue ?
                new ObjectParameter("TrainingPartnerId", trainingPartnerId) :
                new ObjectParameter("TrainingPartnerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_tblTrainingPartnerDetails_SELById_Result>("stp_tblTrainingPartnerDetails_SELById", trainingPartnerIdParameter);
        }
    
        public virtual ObjectResult<stp_tblState_SELByCountryId_Result> stp_tblState_SELByCountryId(Nullable<int> countryId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_tblState_SELByCountryId_Result>("stp_tblState_SELByCountryId", countryIdParameter);
        }
    
        public virtual ObjectResult<stp_GetJobRoles_Result> stp_GetJobRoles(Nullable<int> instanceID, Nullable<int> instanceClassificationId)
        {
            var instanceIDParameter = instanceID.HasValue ?
                new ObjectParameter("InstanceID", instanceID) :
                new ObjectParameter("InstanceID", typeof(int));
    
            var instanceClassificationIdParameter = instanceClassificationId.HasValue ?
                new ObjectParameter("InstanceClassificationId", instanceClassificationId) :
                new ObjectParameter("InstanceClassificationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetJobRoles_Result>("stp_GetJobRoles", instanceIDParameter, instanceClassificationIdParameter);
        }
    
        public virtual ObjectResult<stp_GetLogistics_Result> stp_GetLogistics(Nullable<int> instanceID)
        {
            var instanceIDParameter = instanceID.HasValue ?
                new ObjectParameter("InstanceID", instanceID) :
                new ObjectParameter("InstanceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetLogistics_Result>("stp_GetLogistics", instanceIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> stp_tblTrainingLocation_Delete(Nullable<int> locationId)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("stp_tblTrainingLocation_Delete", locationIdParameter);
        }
    
        public virtual ObjectResult<STP_tblTrainingLocation_GetTrainingDetailsById_Result> STP_tblTrainingLocation_GetTrainingDetailsById(Nullable<int> locationId)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_tblTrainingLocation_GetTrainingDetailsById_Result>("STP_tblTrainingLocation_GetTrainingDetailsById", locationIdParameter);
        }
    
        public virtual int stp_tblTrainingLocation_INSERT(string locationName, string trainingLocCode, Nullable<int> clsRoomCapacity, Nullable<int> noOfRooms, string descriptions, Nullable<int> stateId, string city, string address, Nullable<int> sSCId, Nullable<int> jobRoleId, Nullable<int> createdby, Nullable<System.DateTime> createddate, Nullable<int> updatedby, Nullable<System.DateTime> updatedate)
        {
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var trainingLocCodeParameter = trainingLocCode != null ?
                new ObjectParameter("TrainingLocCode", trainingLocCode) :
                new ObjectParameter("TrainingLocCode", typeof(string));
    
            var clsRoomCapacityParameter = clsRoomCapacity.HasValue ?
                new ObjectParameter("ClsRoomCapacity", clsRoomCapacity) :
                new ObjectParameter("ClsRoomCapacity", typeof(int));
    
            var noOfRoomsParameter = noOfRooms.HasValue ?
                new ObjectParameter("NoOfRooms", noOfRooms) :
                new ObjectParameter("NoOfRooms", typeof(int));
    
            var descriptionsParameter = descriptions != null ?
                new ObjectParameter("Descriptions", descriptions) :
                new ObjectParameter("Descriptions", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var sSCIdParameter = sSCId.HasValue ?
                new ObjectParameter("SSCId", sSCId) :
                new ObjectParameter("SSCId", typeof(int));
    
            var jobRoleIdParameter = jobRoleId.HasValue ?
                new ObjectParameter("JobRoleId", jobRoleId) :
                new ObjectParameter("JobRoleId", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            var updatedbyParameter = updatedby.HasValue ?
                new ObjectParameter("Updatedby", updatedby) :
                new ObjectParameter("Updatedby", typeof(int));
    
            var updatedateParameter = updatedate.HasValue ?
                new ObjectParameter("Updatedate", updatedate) :
                new ObjectParameter("Updatedate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_tblTrainingLocation_INSERT", locationNameParameter, trainingLocCodeParameter, clsRoomCapacityParameter, noOfRoomsParameter, descriptionsParameter, stateIdParameter, cityParameter, addressParameter, sSCIdParameter, jobRoleIdParameter, createdbyParameter, createddateParameter, updatedbyParameter, updatedateParameter);
        }
    
        public virtual ObjectResult<stp_tblTrainingLocation_SEARCH_Result> stp_tblTrainingLocation_SEARCH(string locationName, string trainingLocCode, Nullable<int> stateId, string city)
        {
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var trainingLocCodeParameter = trainingLocCode != null ?
                new ObjectParameter("TrainingLocCode", trainingLocCode) :
                new ObjectParameter("TrainingLocCode", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_tblTrainingLocation_SEARCH_Result>("stp_tblTrainingLocation_SEARCH", locationNameParameter, trainingLocCodeParameter, stateIdParameter, cityParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> stp_tblTrainingLocation_UPDATE(Nullable<int> locationId, string locationName, string trainingLocCode, Nullable<int> clsRoomCapacity, Nullable<int> noOfRooms, string descriptions, Nullable<int> stateId, string city, string address, Nullable<System.DateTime> createddate, Nullable<int> createdby, Nullable<System.DateTime> updatedate, Nullable<int> updatedby)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var trainingLocCodeParameter = trainingLocCode != null ?
                new ObjectParameter("TrainingLocCode", trainingLocCode) :
                new ObjectParameter("TrainingLocCode", typeof(string));
    
            var clsRoomCapacityParameter = clsRoomCapacity.HasValue ?
                new ObjectParameter("ClsRoomCapacity", clsRoomCapacity) :
                new ObjectParameter("ClsRoomCapacity", typeof(int));
    
            var noOfRoomsParameter = noOfRooms.HasValue ?
                new ObjectParameter("NoOfRooms", noOfRooms) :
                new ObjectParameter("NoOfRooms", typeof(int));
    
            var descriptionsParameter = descriptions != null ?
                new ObjectParameter("Descriptions", descriptions) :
                new ObjectParameter("Descriptions", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var updatedateParameter = updatedate.HasValue ?
                new ObjectParameter("Updatedate", updatedate) :
                new ObjectParameter("Updatedate", typeof(System.DateTime));
    
            var updatedbyParameter = updatedby.HasValue ?
                new ObjectParameter("Updatedby", updatedby) :
                new ObjectParameter("Updatedby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("stp_tblTrainingLocation_UPDATE", locationIdParameter, locationNameParameter, trainingLocCodeParameter, clsRoomCapacityParameter, noOfRoomsParameter, descriptionsParameter, stateIdParameter, cityParameter, addressParameter, createddateParameter, createdbyParameter, updatedateParameter, updatedbyParameter);
        }
    
        public virtual int stp_tbltpjobroles_Insert(Nullable<int> trainingPartnerId, Nullable<int> sSCId, Nullable<int> jobRoleId, string descript, Nullable<int> createdBy, Nullable<System.DateTime> createddate, Nullable<int> updatedby, Nullable<System.DateTime> updatedate)
        {
            var trainingPartnerIdParameter = trainingPartnerId.HasValue ?
                new ObjectParameter("TrainingPartnerId", trainingPartnerId) :
                new ObjectParameter("TrainingPartnerId", typeof(int));
    
            var sSCIdParameter = sSCId.HasValue ?
                new ObjectParameter("SSCId", sSCId) :
                new ObjectParameter("SSCId", typeof(int));
    
            var jobRoleIdParameter = jobRoleId.HasValue ?
                new ObjectParameter("JobRoleId", jobRoleId) :
                new ObjectParameter("JobRoleId", typeof(int));
    
            var descriptParameter = descript != null ?
                new ObjectParameter("Descript", descript) :
                new ObjectParameter("Descript", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            var updatedbyParameter = updatedby.HasValue ?
                new ObjectParameter("Updatedby", updatedby) :
                new ObjectParameter("Updatedby", typeof(int));
    
            var updatedateParameter = updatedate.HasValue ?
                new ObjectParameter("Updatedate", updatedate) :
                new ObjectParameter("Updatedate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_tbltpjobroles_Insert", trainingPartnerIdParameter, sSCIdParameter, jobRoleIdParameter, descriptParameter, createdByParameter, createddateParameter, updatedbyParameter, updatedateParameter);
        }
    
        public virtual int stp_tbltcjobroles_Insert(Nullable<int> trainingCenterId, Nullable<int> sSCId, Nullable<int> jobRoleId, string descript, Nullable<int> createdBy, Nullable<System.DateTime> createddate, Nullable<int> updatedby, Nullable<System.DateTime> updatedate)
        {
            var trainingCenterIdParameter = trainingCenterId.HasValue ?
                new ObjectParameter("TrainingCenterId", trainingCenterId) :
                new ObjectParameter("TrainingCenterId", typeof(int));
    
            var sSCIdParameter = sSCId.HasValue ?
                new ObjectParameter("SSCId", sSCId) :
                new ObjectParameter("SSCId", typeof(int));
    
            var jobRoleIdParameter = jobRoleId.HasValue ?
                new ObjectParameter("JobRoleId", jobRoleId) :
                new ObjectParameter("JobRoleId", typeof(int));
    
            var descriptParameter = descript != null ?
                new ObjectParameter("Descript", descript) :
                new ObjectParameter("Descript", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            var updatedbyParameter = updatedby.HasValue ?
                new ObjectParameter("Updatedby", updatedby) :
                new ObjectParameter("Updatedby", typeof(int));
    
            var updatedateParameter = updatedate.HasValue ?
                new ObjectParameter("Updatedate", updatedate) :
                new ObjectParameter("Updatedate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_tbltcjobroles_Insert", trainingCenterIdParameter, sSCIdParameter, jobRoleIdParameter, descriptParameter, createdByParameter, createddateParameter, updatedbyParameter, updatedateParameter);
        }
    
        public virtual ObjectResult<STP_tblInstanceSubClassification_GetJobRoleById_Result> STP_tblInstanceSubClassification_GetJobRoleById(Nullable<int> instanceSubClassificationId)
        {
            var instanceSubClassificationIdParameter = instanceSubClassificationId.HasValue ?
                new ObjectParameter("InstanceSubClassificationId", instanceSubClassificationId) :
                new ObjectParameter("InstanceSubClassificationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_tblInstanceSubClassification_GetJobRoleById_Result>("STP_tblInstanceSubClassification_GetJobRoleById", instanceSubClassificationIdParameter);
        }
    
        public virtual int stp_tblJobRole_INSERT_SSC(Nullable<int> instanceId, Nullable<int> instanceClassificationId, string subClassificationName, string subClassificationDescription, Nullable<int> resultsModeId, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("InstanceId", instanceId) :
                new ObjectParameter("InstanceId", typeof(int));
    
            var instanceClassificationIdParameter = instanceClassificationId.HasValue ?
                new ObjectParameter("InstanceClassificationId", instanceClassificationId) :
                new ObjectParameter("InstanceClassificationId", typeof(int));
    
            var subClassificationNameParameter = subClassificationName != null ?
                new ObjectParameter("SubClassificationName", subClassificationName) :
                new ObjectParameter("SubClassificationName", typeof(string));
    
            var subClassificationDescriptionParameter = subClassificationDescription != null ?
                new ObjectParameter("SubClassificationDescription", subClassificationDescription) :
                new ObjectParameter("SubClassificationDescription", typeof(string));
    
            var resultsModeIdParameter = resultsModeId.HasValue ?
                new ObjectParameter("ResultsModeId", resultsModeId) :
                new ObjectParameter("ResultsModeId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_tblJobRole_INSERT_SSC", instanceIdParameter, instanceClassificationIdParameter, subClassificationNameParameter, subClassificationDescriptionParameter, resultsModeIdParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> stp_tblJobRole_UPDATE_SSC(Nullable<int> instanceId, Nullable<int> instanceSubClassificationId, Nullable<int> instanceClassificationId, string subClassificationName, string subClassificationDescription, Nullable<int> resultsModeId, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("InstanceId", instanceId) :
                new ObjectParameter("InstanceId", typeof(int));
    
            var instanceSubClassificationIdParameter = instanceSubClassificationId.HasValue ?
                new ObjectParameter("InstanceSubClassificationId", instanceSubClassificationId) :
                new ObjectParameter("InstanceSubClassificationId", typeof(int));
    
            var instanceClassificationIdParameter = instanceClassificationId.HasValue ?
                new ObjectParameter("InstanceClassificationId", instanceClassificationId) :
                new ObjectParameter("InstanceClassificationId", typeof(int));
    
            var subClassificationNameParameter = subClassificationName != null ?
                new ObjectParameter("SubClassificationName", subClassificationName) :
                new ObjectParameter("SubClassificationName", typeof(string));
    
            var subClassificationDescriptionParameter = subClassificationDescription != null ?
                new ObjectParameter("SubClassificationDescription", subClassificationDescription) :
                new ObjectParameter("SubClassificationDescription", typeof(string));
    
            var resultsModeIdParameter = resultsModeId.HasValue ?
                new ObjectParameter("ResultsModeId", resultsModeId) :
                new ObjectParameter("ResultsModeId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("stp_tblJobRole_UPDATE_SSC", instanceIdParameter, instanceSubClassificationIdParameter, instanceClassificationIdParameter, subClassificationNameParameter, subClassificationDescriptionParameter, resultsModeIdParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int stp_TBLTLJobroles_Insert(Nullable<int> trainingLlocationsID, Nullable<int> sSCId, Nullable<int> jobRoleId, string descript, Nullable<int> createdBy, Nullable<System.DateTime> createddate, Nullable<int> updatedby, Nullable<System.DateTime> updatedate)
        {
            var trainingLlocationsIDParameter = trainingLlocationsID.HasValue ?
                new ObjectParameter("TrainingLlocationsID", trainingLlocationsID) :
                new ObjectParameter("TrainingLlocationsID", typeof(int));
    
            var sSCIdParameter = sSCId.HasValue ?
                new ObjectParameter("SSCId", sSCId) :
                new ObjectParameter("SSCId", typeof(int));
    
            var jobRoleIdParameter = jobRoleId.HasValue ?
                new ObjectParameter("JobRoleId", jobRoleId) :
                new ObjectParameter("JobRoleId", typeof(int));
    
            var descriptParameter = descript != null ?
                new ObjectParameter("Descript", descript) :
                new ObjectParameter("Descript", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            var updatedbyParameter = updatedby.HasValue ?
                new ObjectParameter("Updatedby", updatedby) :
                new ObjectParameter("Updatedby", typeof(int));
    
            var updatedateParameter = updatedate.HasValue ?
                new ObjectParameter("Updatedate", updatedate) :
                new ObjectParameter("Updatedate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_TBLTLJobroles_Insert", trainingLlocationsIDParameter, sSCIdParameter, jobRoleIdParameter, descriptParameter, createdByParameter, createddateParameter, updatedbyParameter, updatedateParameter);
        }
    
        public virtual ObjectResult<stp_tblMasterTrainer_Search_Result> stp_tblMasterTrainer_Search(string trainerName, Nullable<int> aadhaarNumber, Nullable<int> tpId, string mobileNo, Nullable<int> state, string city)
        {
            var trainerNameParameter = trainerName != null ?
                new ObjectParameter("TrainerName", trainerName) :
                new ObjectParameter("TrainerName", typeof(string));
    
            var aadhaarNumberParameter = aadhaarNumber.HasValue ?
                new ObjectParameter("AadhaarNumber", aadhaarNumber) :
                new ObjectParameter("AadhaarNumber", typeof(int));
    
            var tpIdParameter = tpId.HasValue ?
                new ObjectParameter("TpId", tpId) :
                new ObjectParameter("TpId", typeof(int));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_tblMasterTrainer_Search_Result>("stp_tblMasterTrainer_Search", trainerNameParameter, aadhaarNumberParameter, tpIdParameter, mobileNoParameter, stateParameter, cityParameter);
        }
    
        public virtual ObjectResult<stp_tblMasterTrainers_SEARCH_Result> stp_tblMasterTrainers_SEARCH(Nullable<int> instanceId)
        {
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("InstanceId", instanceId) :
                new ObjectParameter("InstanceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_tblMasterTrainers_SEARCH_Result>("stp_tblMasterTrainers_SEARCH", instanceIdParameter);
        }
    
        public virtual ObjectResult<stp_GetJobRoleDetails_Result> stp_GetJobRoleDetails(Nullable<int> instanceId, Nullable<int> trainingPartnerId)
        {
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("InstanceId", instanceId) :
                new ObjectParameter("InstanceId", typeof(int));
    
            var trainingPartnerIdParameter = trainingPartnerId.HasValue ?
                new ObjectParameter("TrainingPartnerId", trainingPartnerId) :
                new ObjectParameter("TrainingPartnerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetJobRoleDetails_Result>("stp_GetJobRoleDetails", instanceIdParameter, trainingPartnerIdParameter);
        }
    
        public virtual ObjectResult<stp_GetJobRoleDetails_Center_Result> stp_GetJobRoleDetails_Center(Nullable<int> instanceId, Nullable<int> trainingCenterID)
        {
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("InstanceId", instanceId) :
                new ObjectParameter("InstanceId", typeof(int));
    
            var trainingCenterIDParameter = trainingCenterID.HasValue ?
                new ObjectParameter("TrainingCenterID", trainingCenterID) :
                new ObjectParameter("TrainingCenterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetJobRoleDetails_Center_Result>("stp_GetJobRoleDetails_Center", instanceIdParameter, trainingCenterIDParameter);
        }
    
        public virtual ObjectResult<stp_GetJobRolesNew_Result> stp_GetJobRolesNew(Nullable<int> instanceID, Nullable<int> instanceClassificationId)
        {
            var instanceIDParameter = instanceID.HasValue ?
                new ObjectParameter("InstanceID", instanceID) :
                new ObjectParameter("InstanceID", typeof(int));
    
            var instanceClassificationIdParameter = instanceClassificationId.HasValue ?
                new ObjectParameter("InstanceClassificationId", instanceClassificationId) :
                new ObjectParameter("InstanceClassificationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetJobRolesNew_Result>("stp_GetJobRolesNew", instanceIDParameter, instanceClassificationIdParameter);
        }
    
        public virtual int stp_tblMasterTrainer_Insert(Nullable<int> trainerId, string trainerName, Nullable<int> gender, string dateofBirth, Nullable<int> aadhaarNumber, string educationAttained, Nullable<int> industryexperience, Nullable<int> trainingExperience, Nullable<int> trainingType, string mobileNumber, string landlineNumber, string emailAddress, Nullable<int> parentType, string nameofParent, string nameofTrainingPartner, string sPOCMobileNumber, string scheme, string dOA, Nullable<int> employmentState, string sector, Nullable<int> domainJobRole, Nullable<int> otherJobRole, Nullable<int> state, string city, Nullable<int> sSCId, string jobRole, Nullable<int> tOTalDates, Nullable<System.DateTime> createddate, Nullable<int> createdBy, Nullable<System.DateTime> updatedate, Nullable<int> updatedby)
        {
            var trainerIdParameter = trainerId.HasValue ?
                new ObjectParameter("TrainerId", trainerId) :
                new ObjectParameter("TrainerId", typeof(int));
    
            var trainerNameParameter = trainerName != null ?
                new ObjectParameter("TrainerName", trainerName) :
                new ObjectParameter("TrainerName", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var dateofBirthParameter = dateofBirth != null ?
                new ObjectParameter("DateofBirth", dateofBirth) :
                new ObjectParameter("DateofBirth", typeof(string));
    
            var aadhaarNumberParameter = aadhaarNumber.HasValue ?
                new ObjectParameter("AadhaarNumber", aadhaarNumber) :
                new ObjectParameter("AadhaarNumber", typeof(int));
    
            var educationAttainedParameter = educationAttained != null ?
                new ObjectParameter("EducationAttained", educationAttained) :
                new ObjectParameter("EducationAttained", typeof(string));
    
            var industryexperienceParameter = industryexperience.HasValue ?
                new ObjectParameter("Industryexperience", industryexperience) :
                new ObjectParameter("Industryexperience", typeof(int));
    
            var trainingExperienceParameter = trainingExperience.HasValue ?
                new ObjectParameter("TrainingExperience", trainingExperience) :
                new ObjectParameter("TrainingExperience", typeof(int));
    
            var trainingTypeParameter = trainingType.HasValue ?
                new ObjectParameter("TrainingType", trainingType) :
                new ObjectParameter("TrainingType", typeof(int));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var landlineNumberParameter = landlineNumber != null ?
                new ObjectParameter("LandlineNumber", landlineNumber) :
                new ObjectParameter("LandlineNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var parentTypeParameter = parentType.HasValue ?
                new ObjectParameter("ParentType", parentType) :
                new ObjectParameter("ParentType", typeof(int));
    
            var nameofParentParameter = nameofParent != null ?
                new ObjectParameter("NameofParent", nameofParent) :
                new ObjectParameter("NameofParent", typeof(string));
    
            var nameofTrainingPartnerParameter = nameofTrainingPartner != null ?
                new ObjectParameter("NameofTrainingPartner", nameofTrainingPartner) :
                new ObjectParameter("NameofTrainingPartner", typeof(string));
    
            var sPOCMobileNumberParameter = sPOCMobileNumber != null ?
                new ObjectParameter("SPOCMobileNumber", sPOCMobileNumber) :
                new ObjectParameter("SPOCMobileNumber", typeof(string));
    
            var schemeParameter = scheme != null ?
                new ObjectParameter("Scheme", scheme) :
                new ObjectParameter("Scheme", typeof(string));
    
            var dOAParameter = dOA != null ?
                new ObjectParameter("DOA", dOA) :
                new ObjectParameter("DOA", typeof(string));
    
            var employmentStateParameter = employmentState.HasValue ?
                new ObjectParameter("EmploymentState", employmentState) :
                new ObjectParameter("EmploymentState", typeof(int));
    
            var sectorParameter = sector != null ?
                new ObjectParameter("Sector", sector) :
                new ObjectParameter("Sector", typeof(string));
    
            var domainJobRoleParameter = domainJobRole.HasValue ?
                new ObjectParameter("DomainJobRole", domainJobRole) :
                new ObjectParameter("DomainJobRole", typeof(int));
    
            var otherJobRoleParameter = otherJobRole.HasValue ?
                new ObjectParameter("OtherJobRole", otherJobRole) :
                new ObjectParameter("OtherJobRole", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var sSCIdParameter = sSCId.HasValue ?
                new ObjectParameter("SSCId", sSCId) :
                new ObjectParameter("SSCId", typeof(int));
    
            var jobRoleParameter = jobRole != null ?
                new ObjectParameter("JobRole", jobRole) :
                new ObjectParameter("JobRole", typeof(string));
    
            var tOTalDatesParameter = tOTalDates.HasValue ?
                new ObjectParameter("TOTalDates", tOTalDates) :
                new ObjectParameter("TOTalDates", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedateParameter = updatedate.HasValue ?
                new ObjectParameter("Updatedate", updatedate) :
                new ObjectParameter("Updatedate", typeof(System.DateTime));
    
            var updatedbyParameter = updatedby.HasValue ?
                new ObjectParameter("Updatedby", updatedby) :
                new ObjectParameter("Updatedby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_tblMasterTrainer_Insert", trainerIdParameter, trainerNameParameter, genderParameter, dateofBirthParameter, aadhaarNumberParameter, educationAttainedParameter, industryexperienceParameter, trainingExperienceParameter, trainingTypeParameter, mobileNumberParameter, landlineNumberParameter, emailAddressParameter, parentTypeParameter, nameofParentParameter, nameofTrainingPartnerParameter, sPOCMobileNumberParameter, schemeParameter, dOAParameter, employmentStateParameter, sectorParameter, domainJobRoleParameter, otherJobRoleParameter, stateParameter, cityParameter, sSCIdParameter, jobRoleParameter, tOTalDatesParameter, createddateParameter, createdByParameter, updatedateParameter, updatedbyParameter);
        }
    
        public virtual ObjectResult<stp_tblMasterTrainer_SELById_Result> stp_tblMasterTrainer_SELById(Nullable<int> trainerId)
        {
            var trainerIdParameter = trainerId.HasValue ?
                new ObjectParameter("TrainerId", trainerId) :
                new ObjectParameter("TrainerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_tblMasterTrainer_SELById_Result>("stp_tblMasterTrainer_SELById", trainerIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> stp_tblMasterTrainer_Update(Nullable<int> trainerId, string trainerName, Nullable<int> gender, string dateofBirth, Nullable<int> aadhaarNumber, string educationAttained, Nullable<int> industryexperience, Nullable<int> trainingExperience, Nullable<int> trainingType, string mobileNumber, string landlineNumber, string emailAddress, Nullable<int> parentType, string nameofParent, string nameofTrainingPartner, string sPOCMobileNumber, string scheme, string dOA, Nullable<int> employmentState, string sector, Nullable<int> domainJobRole, Nullable<int> otherJobRole, Nullable<int> state, string city, Nullable<int> tOTalDates, Nullable<System.DateTime> createddate, Nullable<int> createdBy, Nullable<System.DateTime> updatedate, Nullable<int> updatedby)
        {
            var trainerIdParameter = trainerId.HasValue ?
                new ObjectParameter("TrainerId", trainerId) :
                new ObjectParameter("TrainerId", typeof(int));
    
            var trainerNameParameter = trainerName != null ?
                new ObjectParameter("TrainerName", trainerName) :
                new ObjectParameter("TrainerName", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var dateofBirthParameter = dateofBirth != null ?
                new ObjectParameter("DateofBirth", dateofBirth) :
                new ObjectParameter("DateofBirth", typeof(string));
    
            var aadhaarNumberParameter = aadhaarNumber.HasValue ?
                new ObjectParameter("AadhaarNumber", aadhaarNumber) :
                new ObjectParameter("AadhaarNumber", typeof(int));
    
            var educationAttainedParameter = educationAttained != null ?
                new ObjectParameter("EducationAttained", educationAttained) :
                new ObjectParameter("EducationAttained", typeof(string));
    
            var industryexperienceParameter = industryexperience.HasValue ?
                new ObjectParameter("Industryexperience", industryexperience) :
                new ObjectParameter("Industryexperience", typeof(int));
    
            var trainingExperienceParameter = trainingExperience.HasValue ?
                new ObjectParameter("TrainingExperience", trainingExperience) :
                new ObjectParameter("TrainingExperience", typeof(int));
    
            var trainingTypeParameter = trainingType.HasValue ?
                new ObjectParameter("TrainingType", trainingType) :
                new ObjectParameter("TrainingType", typeof(int));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var landlineNumberParameter = landlineNumber != null ?
                new ObjectParameter("LandlineNumber", landlineNumber) :
                new ObjectParameter("LandlineNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var parentTypeParameter = parentType.HasValue ?
                new ObjectParameter("ParentType", parentType) :
                new ObjectParameter("ParentType", typeof(int));
    
            var nameofParentParameter = nameofParent != null ?
                new ObjectParameter("NameofParent", nameofParent) :
                new ObjectParameter("NameofParent", typeof(string));
    
            var nameofTrainingPartnerParameter = nameofTrainingPartner != null ?
                new ObjectParameter("NameofTrainingPartner", nameofTrainingPartner) :
                new ObjectParameter("NameofTrainingPartner", typeof(string));
    
            var sPOCMobileNumberParameter = sPOCMobileNumber != null ?
                new ObjectParameter("SPOCMobileNumber", sPOCMobileNumber) :
                new ObjectParameter("SPOCMobileNumber", typeof(string));
    
            var schemeParameter = scheme != null ?
                new ObjectParameter("Scheme", scheme) :
                new ObjectParameter("Scheme", typeof(string));
    
            var dOAParameter = dOA != null ?
                new ObjectParameter("DOA", dOA) :
                new ObjectParameter("DOA", typeof(string));
    
            var employmentStateParameter = employmentState.HasValue ?
                new ObjectParameter("EmploymentState", employmentState) :
                new ObjectParameter("EmploymentState", typeof(int));
    
            var sectorParameter = sector != null ?
                new ObjectParameter("Sector", sector) :
                new ObjectParameter("Sector", typeof(string));
    
            var domainJobRoleParameter = domainJobRole.HasValue ?
                new ObjectParameter("DomainJobRole", domainJobRole) :
                new ObjectParameter("DomainJobRole", typeof(int));
    
            var otherJobRoleParameter = otherJobRole.HasValue ?
                new ObjectParameter("OtherJobRole", otherJobRole) :
                new ObjectParameter("OtherJobRole", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var tOTalDatesParameter = tOTalDates.HasValue ?
                new ObjectParameter("TOTalDates", tOTalDates) :
                new ObjectParameter("TOTalDates", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedateParameter = updatedate.HasValue ?
                new ObjectParameter("Updatedate", updatedate) :
                new ObjectParameter("Updatedate", typeof(System.DateTime));
    
            var updatedbyParameter = updatedby.HasValue ?
                new ObjectParameter("Updatedby", updatedby) :
                new ObjectParameter("Updatedby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("stp_tblMasterTrainer_Update", trainerIdParameter, trainerNameParameter, genderParameter, dateofBirthParameter, aadhaarNumberParameter, educationAttainedParameter, industryexperienceParameter, trainingExperienceParameter, trainingTypeParameter, mobileNumberParameter, landlineNumberParameter, emailAddressParameter, parentTypeParameter, nameofParentParameter, nameofTrainingPartnerParameter, sPOCMobileNumberParameter, schemeParameter, dOAParameter, employmentStateParameter, sectorParameter, domainJobRoleParameter, otherJobRoleParameter, stateParameter, cityParameter, tOTalDatesParameter, createddateParameter, createdByParameter, updatedateParameter, updatedbyParameter);
        }
    
        public virtual ObjectResult<stp_tblMasterTrainers_SELById_Result> stp_tblMasterTrainers_SELById(Nullable<int> instanceId)
        {
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("InstanceId", instanceId) :
                new ObjectParameter("InstanceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_tblMasterTrainers_SELById_Result>("stp_tblMasterTrainers_SELById", instanceIdParameter);
        }
    
        public virtual int stp_tblTrainer_Insert(string trainerName, Nullable<int> gender, string dateofBirth, string aadhaarNumber, string educationAttained, Nullable<int> industryexperience, Nullable<int> trainingExperience, Nullable<int> trainingType, string mobileNumber, string landlineNumber, string emailAddress, Nullable<int> parentType, string nameofParent, string nameofTrainingPartner, string sPOCMobileNumber, string scheme, string dOA, Nullable<int> employmentState, string sector, Nullable<int> domainJobRole, Nullable<int> otherJobRole, Nullable<int> state, string city, Nullable<int> tOTalDates, Nullable<int> masterTrainerId, Nullable<int> certified, Nullable<int> smartPortal, Nullable<int> createdBy, Nullable<System.DateTime> createddate, Nullable<int> updatedby, Nullable<System.DateTime> updatedate)
        {
            var trainerNameParameter = trainerName != null ?
                new ObjectParameter("TrainerName", trainerName) :
                new ObjectParameter("TrainerName", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var dateofBirthParameter = dateofBirth != null ?
                new ObjectParameter("DateofBirth", dateofBirth) :
                new ObjectParameter("DateofBirth", typeof(string));
    
            var aadhaarNumberParameter = aadhaarNumber != null ?
                new ObjectParameter("AadhaarNumber", aadhaarNumber) :
                new ObjectParameter("AadhaarNumber", typeof(string));
    
            var educationAttainedParameter = educationAttained != null ?
                new ObjectParameter("EducationAttained", educationAttained) :
                new ObjectParameter("EducationAttained", typeof(string));
    
            var industryexperienceParameter = industryexperience.HasValue ?
                new ObjectParameter("Industryexperience", industryexperience) :
                new ObjectParameter("Industryexperience", typeof(int));
    
            var trainingExperienceParameter = trainingExperience.HasValue ?
                new ObjectParameter("TrainingExperience", trainingExperience) :
                new ObjectParameter("TrainingExperience", typeof(int));
    
            var trainingTypeParameter = trainingType.HasValue ?
                new ObjectParameter("TrainingType", trainingType) :
                new ObjectParameter("TrainingType", typeof(int));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var landlineNumberParameter = landlineNumber != null ?
                new ObjectParameter("LandlineNumber", landlineNumber) :
                new ObjectParameter("LandlineNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var parentTypeParameter = parentType.HasValue ?
                new ObjectParameter("ParentType", parentType) :
                new ObjectParameter("ParentType", typeof(int));
    
            var nameofParentParameter = nameofParent != null ?
                new ObjectParameter("NameofParent", nameofParent) :
                new ObjectParameter("NameofParent", typeof(string));
    
            var nameofTrainingPartnerParameter = nameofTrainingPartner != null ?
                new ObjectParameter("NameofTrainingPartner", nameofTrainingPartner) :
                new ObjectParameter("NameofTrainingPartner", typeof(string));
    
            var sPOCMobileNumberParameter = sPOCMobileNumber != null ?
                new ObjectParameter("SPOCMobileNumber", sPOCMobileNumber) :
                new ObjectParameter("SPOCMobileNumber", typeof(string));
    
            var schemeParameter = scheme != null ?
                new ObjectParameter("Scheme", scheme) :
                new ObjectParameter("Scheme", typeof(string));
    
            var dOAParameter = dOA != null ?
                new ObjectParameter("DOA", dOA) :
                new ObjectParameter("DOA", typeof(string));
    
            var employmentStateParameter = employmentState.HasValue ?
                new ObjectParameter("EmploymentState", employmentState) :
                new ObjectParameter("EmploymentState", typeof(int));
    
            var sectorParameter = sector != null ?
                new ObjectParameter("Sector", sector) :
                new ObjectParameter("Sector", typeof(string));
    
            var domainJobRoleParameter = domainJobRole.HasValue ?
                new ObjectParameter("DomainJobRole", domainJobRole) :
                new ObjectParameter("DomainJobRole", typeof(int));
    
            var otherJobRoleParameter = otherJobRole.HasValue ?
                new ObjectParameter("OtherJobRole", otherJobRole) :
                new ObjectParameter("OtherJobRole", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var tOTalDatesParameter = tOTalDates.HasValue ?
                new ObjectParameter("TOTalDates", tOTalDates) :
                new ObjectParameter("TOTalDates", typeof(int));
    
            var masterTrainerIdParameter = masterTrainerId.HasValue ?
                new ObjectParameter("MasterTrainerId", masterTrainerId) :
                new ObjectParameter("MasterTrainerId", typeof(int));
    
            var certifiedParameter = certified.HasValue ?
                new ObjectParameter("Certified", certified) :
                new ObjectParameter("Certified", typeof(int));
    
            var smartPortalParameter = smartPortal.HasValue ?
                new ObjectParameter("SmartPortal", smartPortal) :
                new ObjectParameter("SmartPortal", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            var updatedbyParameter = updatedby.HasValue ?
                new ObjectParameter("Updatedby", updatedby) :
                new ObjectParameter("Updatedby", typeof(int));
    
            var updatedateParameter = updatedate.HasValue ?
                new ObjectParameter("Updatedate", updatedate) :
                new ObjectParameter("Updatedate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_tblTrainer_Insert", trainerNameParameter, genderParameter, dateofBirthParameter, aadhaarNumberParameter, educationAttainedParameter, industryexperienceParameter, trainingExperienceParameter, trainingTypeParameter, mobileNumberParameter, landlineNumberParameter, emailAddressParameter, parentTypeParameter, nameofParentParameter, nameofTrainingPartnerParameter, sPOCMobileNumberParameter, schemeParameter, dOAParameter, employmentStateParameter, sectorParameter, domainJobRoleParameter, otherJobRoleParameter, stateParameter, cityParameter, tOTalDatesParameter, masterTrainerIdParameter, certifiedParameter, smartPortalParameter, createdByParameter, createddateParameter, updatedbyParameter, updatedateParameter);
        }
    
        public virtual ObjectResult<stp_GetJobRoleDetailsMT_Result> stp_GetJobRoleDetailsMT(Nullable<int> instanceId, Nullable<int> masterTrainnersID)
        {
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("InstanceId", instanceId) :
                new ObjectParameter("InstanceId", typeof(int));
    
            var masterTrainnersIDParameter = masterTrainnersID.HasValue ?
                new ObjectParameter("MasterTrainnersID", masterTrainnersID) :
                new ObjectParameter("MasterTrainnersID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetJobRoleDetailsMT_Result>("stp_GetJobRoleDetailsMT", instanceIdParameter, masterTrainnersIDParameter);
        }
    
        public virtual ObjectResult<stp_GetJobRoleDetailsTL_Result> stp_GetJobRoleDetailsTL(Nullable<int> instanceId, Nullable<int> trainingLlocationsID)
        {
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("InstanceId", instanceId) :
                new ObjectParameter("InstanceId", typeof(int));
    
            var trainingLlocationsIDParameter = trainingLlocationsID.HasValue ?
                new ObjectParameter("TrainingLlocationsID", trainingLlocationsID) :
                new ObjectParameter("TrainingLlocationsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetJobRoleDetailsTL_Result>("stp_GetJobRoleDetailsTL", instanceIdParameter, trainingLlocationsIDParameter);
        }
    
        public virtual int stp_tblmtjobroles_Insert(Nullable<int> masterTrainnersId, Nullable<int> sSCId, Nullable<int> jobRoleId, string description, Nullable<int> createdBy, Nullable<System.DateTime> createddate, Nullable<int> updatedby, Nullable<System.DateTime> updatedate)
        {
            var masterTrainnersIdParameter = masterTrainnersId.HasValue ?
                new ObjectParameter("MasterTrainnersId", masterTrainnersId) :
                new ObjectParameter("MasterTrainnersId", typeof(int));
    
            var sSCIdParameter = sSCId.HasValue ?
                new ObjectParameter("SSCId", sSCId) :
                new ObjectParameter("SSCId", typeof(int));
    
            var jobRoleIdParameter = jobRoleId.HasValue ?
                new ObjectParameter("JobRoleId", jobRoleId) :
                new ObjectParameter("JobRoleId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            var updatedbyParameter = updatedby.HasValue ?
                new ObjectParameter("Updatedby", updatedby) :
                new ObjectParameter("Updatedby", typeof(int));
    
            var updatedateParameter = updatedate.HasValue ?
                new ObjectParameter("Updatedate", updatedate) :
                new ObjectParameter("Updatedate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_tblmtjobroles_Insert", masterTrainnersIdParameter, sSCIdParameter, jobRoleIdParameter, descriptionParameter, createdByParameter, createddateParameter, updatedbyParameter, updatedateParameter);
        }
    }
}
